{
  "address": "0x9F03a183f1BE54401286e131764243F4F8C4934f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "contract FootiumLitePlayers",
          "name": "_players",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[5]",
          "name": "formationA",
          "type": "uint256[5]"
        },
        {
          "indexed": false,
          "internalType": "uint256[5]",
          "name": "formationB",
          "type": "uint256[5]"
        }
      ],
      "name": "MatchRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "MatchRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "MatchSeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[5]",
          "name": "formation",
          "type": "uint256[5]"
        }
      ],
      "name": "TacticsSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "formation",
          "type": "uint256[]"
        }
      ],
      "name": "formationInvalid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "registerMatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "requestSeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "formation",
          "type": "uint256[5]"
        }
      ],
      "name": "setTactics",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "formationA",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "formationB",
          "type": "uint256[]"
        }
      ],
      "name": "simulateMatch",
      "outputs": [
        {
          "internalType": "enum FootiumLiteFriendlies.SimStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x61a13729d50dd8ce13b5816d8e6591fb63c011a916f95e97d724e8a19387fe96",
  "receipt": {
    "to": null,
    "from": "0xb19BC46C52A1352A071fe2389503B6FE1ABD50Ff",
    "contractAddress": "0x9F03a183f1BE54401286e131764243F4F8C4934f",
    "transactionIndex": 14,
    "gasUsed": "999935",
    "logsBloom": "0x
    "blockHash": "0x96d57df47597a91573fc29c563d95c65169c6d06275ae7f03e6f5a81756939e6",
    "transactionHash": "0x61a13729d50dd8ce13b5816d8e6591fb63c011a916f95e97d724e8a19387fe96",
    "logs": [],
    "blockNumber": 10199395,
    "cumulativeGasUsed": "8432686",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x346eb487B62058108Cf0ed7d2638b8bD79F2713F",
    "0x293a1DBcc5654206fA747e666f46DCe174D3EA7f",
    "0x832f7461Fd2FaBd90D6eCA465FbB9F4914DBFb6e"
  ],
  "numDeployments": 1,
  "solcInputHash": "60383510c8574857e1f67441cf4292bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contract FootiumLitePlayers\",\"name\":\"_players\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"formationA\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"formationB\",\"type\":\"uint256[5]\"}],\"name\":\"MatchRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"MatchRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"MatchSeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"formation\",\"type\":\"uint256[5]\"}],\"name\":\"TacticsSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"formation\",\"type\":\"uint256[]\"}],\"name\":\"formationInvalid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"registerMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"requestSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"formation\",\"type\":\"uint256[5]\"}],\"name\":\"setTactics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"formationA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"formationB\",\"type\":\"uint256[]\"}],\"name\":\"simulateMatch\",\"outputs\":[{\"internalType\":\"enum FootiumLiteFriendlies.SimStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol\":\"FootiumLiteFriendlies\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\nimport {FootiumLitePlayers} from \\\"../FootiumLitePlayers/FootiumLitePlayers.sol\\\";\\n\\ncontract FootiumLiteFriendlies is VRFConsumerBase {\\n    bytes32 private constant keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\\n    uint256 private constant fee = 0.1 * 10**18;\\n    uint256 constant TEAM_SIZE = 5;\\n\\n    enum MatchStatus {\\n        STATUS_REGISTERED,\\n        STATUS_VRF_PENDING,\\n        STATUS_READY\\n    }\\n\\n    enum SimStatus {\\n        WIN_A,\\n        WIN_B,\\n        DRAW\\n    }\\n\\n    struct Match {\\n        uint256 seed;\\n        uint256 timestamp;\\n        address accountA;\\n        address accountB;\\n        MatchStatus status;\\n    }\\n\\n    FootiumLitePlayers players;\\n    Match[] matches;\\n    mapping(bytes32 => uint256) private requestToMatch;\\n    mapping(address => uint256[TEAM_SIZE]) private formations;\\n\\n    event MatchRegistered(\\n        uint256 index,\\n        uint256 timestamp,\\n        address accountA,\\n        address accountB,\\n        uint256[TEAM_SIZE] formationA,\\n        uint256[TEAM_SIZE] formationB\\n    );\\n    event MatchRequested(uint256 index, bytes32 requestId);\\n    event MatchSeed(uint256 index, uint256 seed);\\n    event TacticsSet(address owner, uint256[TEAM_SIZE] formation);\\n\\n    constructor(\\n        address vrfCoordinator,\\n        address link,\\n        FootiumLitePlayers _players\\n    ) VRFConsumerBase(vrfCoordinator, link) {\\n        players = _players;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier formationValid(address owner, uint256[TEAM_SIZE] calldata formation) {\\n        bool[TEAM_SIZE] memory seenPlayer;\\n        for (uint256 i = 0; i < TEAM_SIZE; i++) {\\n            require(owner == players.ownerOf(formation[i]));\\n            require(!seenPlayer[formation[i]]);\\n\\n            seenPlayer[formation[i]] = true;\\n        }\\n        _;\\n    }\\n\\n    /* External */\\n\\n    function setTactics(uint256[TEAM_SIZE] calldata formation) external {\\n        formations[msg.sender] = formation;\\n\\n        emit TacticsSet(msg.sender, formation);\\n    }\\n\\n    function registerMatch(address accountB, uint256 timestamp) external {\\n        uint256 index = matches.length;\\n\\n        Match memory game = Match(0, timestamp, msg.sender, accountB, MatchStatus.STATUS_REGISTERED);\\n        matches.push(game);\\n\\n        emit MatchRegistered(\\n            index,\\n            timestamp,\\n            game.accountA,\\n            game.accountB,\\n            formations[msg.sender],\\n            formations[accountB]\\n        );\\n    }\\n\\n    function requestSeed(uint256 index) external {\\n        Match memory game = matches[index];\\n\\n        require(block.timestamp >= game.timestamp);\\n\\n        bytes32 requestId = requestRandomness(keyHash, fee);\\n        requestToMatch[requestId] = index;\\n        game.status = MatchStatus.STATUS_VRF_PENDING;\\n\\n        emit MatchRequested(index, requestId);\\n    }\\n\\n    /* Internal */\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        Match storage game = matches[requestToMatch[requestId]];\\n\\n        game.seed = randomness;\\n        game.status = MatchStatus.STATUS_READY;\\n\\n        emit MatchSeed(requestToMatch[requestId], randomness);\\n    }\\n\\n    /* View */\\n\\n    function formationInvalid(uint256[] calldata formation) public pure returns (bool) {\\n        bool[TEAM_SIZE] memory seen;\\n        for (uint256 i = 0; i < TEAM_SIZE; i++) {\\n            if (seen[formation[i]]) {\\n                return true;\\n            }\\n            seen[i] = true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function simulateMatch(\\n        uint256 seed,\\n        uint256[] calldata formationA,\\n        uint256[] calldata formationB\\n    ) public view returns (SimStatus) {\\n        // Check that formations have been set\\n        bool invalidA = formationInvalid(formationA);\\n        bool invalidB = formationInvalid(formationB);\\n        if (invalidA && invalidB) {\\n            return SimStatus.DRAW;\\n        } else if (invalidA) {\\n            return SimStatus.WIN_B;\\n        } else if (invalidB) {\\n            return SimStatus.WIN_A;\\n        }\\n\\n        // Run simulation\\n        uint256 attackA;\\n        uint256 attackB;\\n        for (uint256 i = 0; i < TEAM_SIZE; i++) {\\n            uint256[7] memory playerA = players.getTraits(formationA[i]);\\n            uint256[7] memory playerB = players.getTraits(formationB[i]);\\n            for (uint256 j; j < playerA.length; j++) {\\n                attackA += playerA[j];\\n                attackB += playerB[j];\\n            }\\n        }\\n\\n        if (seed % (attackA + attackB) < attackA) {\\n            return SimStatus.WIN_A;\\n        }\\n        return SimStatus.WIN_B;\\n    }\\n}\\n\",\"keccak256\":\"0xe6781aab9af2849d39fde03066797b00f9bdd44d138ab2b915ad530fc914c11c\",\"license\":\"MIT\"},\"src/FootiumLitePlayers/FootiumLitePlayers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Svgs} from \\\"../Svgs/Svgs.sol\\\";\\n\\ncontract FootiumLitePlayers is ERC721, Ownable {\\n    uint256 constant KEEPER_PROBABILITY_DENOMINATOR = 6;\\n    uint256 constant NUMBERIC_TRAITS_NUM = 7;\\n    uint256 constant IMAGE_TRAITS_NUM = 7;\\n    uint256 constant MAX_STAT = 11;\\n\\n    uint256 constant MINT_PRICE = 0.01 ether;\\n\\n    uint256[IMAGE_TRAITS_NUM] maxImageTraits = [5, 10, 8, 10, 9, 3, 10];\\n\\n    struct Player {\\n        bool keeper;\\n        string firstName;\\n        string lastName;\\n        uint256[NUMBERIC_TRAITS_NUM] numericTraits;\\n        uint256[IMAGE_TRAITS_NUM] imageTraits;\\n    }\\n\\n    Svgs svgs;\\n    string[] firstNames;\\n    string[] lastNames;\\n    mapping(uint256 => Player) playersStats;\\n\\n    event PlayerSigned(uint256 tokenId, bool goalKeeper, uint256[NUMBERIC_TRAITS_NUM] traits);\\n\\n    constructor(\\n        Svgs _svgs,\\n        string[] memory _firstNames,\\n        string[] memory _lastNames\\n    ) ERC721(\\\"FootiumLitePlayers\\\", \\\"FLP\\\") {\\n        svgs = _svgs;\\n        firstNames = _firstNames;\\n        lastNames = _lastNames;\\n    }\\n\\n    /* External */\\n\\n    function mint(uint256 tokenId) external payable {\\n        require(msg.value == MINT_PRICE);\\n\\n        playersStats[tokenId].firstName = firstNames[\\n            uint256(keccak256(abi.encode(tokenId, \\\"first\\\"))) % firstNames.length\\n        ];\\n        playersStats[tokenId].lastName = lastNames[uint256(keccak256(abi.encode(tokenId, \\\"last\\\"))) % lastNames.length];\\n\\n        bool keeper = (tokenId % KEEPER_PROBABILITY_DENOMINATOR) == 0;\\n        playersStats[tokenId].keeper = keeper;\\n\\n        for (uint256 i; i < NUMBERIC_TRAITS_NUM; i++) {\\n            playersStats[tokenId].numericTraits[i] = uint256(keccak256(abi.encode(tokenId, i))) % MAX_STAT;\\n        }\\n\\n        for (uint256 i; i < IMAGE_TRAITS_NUM; i++) {\\n            playersStats[tokenId].imageTraits[i] = uint256(keccak256(abi.encode(tokenId, i))) % maxImageTraits[i];\\n        }\\n        _mint(msg.sender, tokenId);\\n\\n        emit PlayerSigned(tokenId, keeper, playersStats[tokenId].numericTraits);\\n    }\\n\\n    function updateNumericTraits(uint256 tokenId, uint256[NUMBERIC_TRAITS_NUM] calldata newTraits) external onlyOwner {\\n        playersStats[tokenId].numericTraits = newTraits;\\n    }\\n\\n    /* View */\\n\\n    function getTraits(uint256 tokenId) public view returns (uint256[NUMBERIC_TRAITS_NUM] memory) {\\n        return playersStats[tokenId].numericTraits;\\n    }\\n\\n    function getPlayerSvg(uint256 tokenId) public view returns (string memory) {\\n        string memory part = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 210 297\\\">',\\n                svgs.getSvg(\\\"pose\\\", playersStats[tokenId].imageTraits[0]),\\n                svgs.getSvg(\\\"facial\\\", playersStats[tokenId].imageTraits[4]),\\n                svgs.getSvg(\\\"hair\\\", playersStats[tokenId].imageTraits[1]),\\n                svgs.getSvg(\\\"brow\\\", playersStats[tokenId].imageTraits[2]),\\n                svgs.getSvg(\\\"eye\\\", playersStats[tokenId].imageTraits[3])\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    part,\\n                    svgs.getSvg(\\\"mouth\\\", playersStats[tokenId].imageTraits[5]),\\n                    svgs.getSvg(\\\"nose\\\", playersStats[tokenId].imageTraits[6]),\\n                    svgs.getSvg(\\\"shirt\\\", 0),\\n                    svgs.getSvg(\\\"shorts\\\", 0),\\n                    svgs.getSvg(\\\"socks\\\", 0),\\n                    svgs.getSvg(\\\"shoes\\\", 0),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9fe4e0cb5f3d2bfa33fffcc2626794941551b978c2b7d9a1f8cfcdcf12a135e9\",\"license\":\"MIT\"},\"src/Svgs/Svgs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Svgs is Ownable {\\n    mapping(bytes32 => uint256) private ids;\\n    mapping(bytes32 => mapping(uint256 => string)) private svgs;\\n\\n    function storeSvg(string calldata _svg, bytes32 _svgType) external onlyOwner {\\n        svgs[_svgType][ids[_svgType]] = _svg;\\n        ids[_svgType]++;\\n    }\\n\\n    function getSvg(bytes32 _svgType, uint256 _id) public view returns (string memory) {\\n        return svgs[_svgType][_id];\\n    }\\n}\\n\",\"keccak256\":\"0x5b1c6dc02874d14366fdc3df29af6df4b041b3cb7312d819f414cde18a0e013b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516111a83803806111a883398101604081905261002f91610075565b6001600160a01b0392831660a052908216608052600180546001600160a01b031916919092161790556100c2565b6001600160a01b038116811461007257600080fd5b50565b60008060006060848603121561008a57600080fd5b83516100958161005d565b60208501519093506100a68161005d565b60408501519092506100b78161005d565b809150509250925092565b60805160a0516110ba6100ee600039600081816106a5015261099b0152600061095f01526110ba6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636d663261116100505780636d663261146100c757806394985ddd146100e7578063a9df851a146100fa57600080fd5b8063252acdf91461007757806334163ecc1461009f5780634d0d6323146100b4575b600080fd5b61008a610085366004610bae565b61010d565b60405190151581526020015b60405180910390f35b6100b26100ad366004610bf0565b61019f565b005b6100b26100c2366004610c18565b6101f7565b6100da6100d5366004610c5d565b61041b565b6040516100969190610d06565b6100b26100f5366004610d47565b61068d565b6100b2610108366004610d69565b61073e565b6000610117610af1565b60005b6005811015610192578185858381811061013657610136610d82565b905060200201356005811061014d5761014d610d82565b60200201511561016257600192505050610199565b600182826005811061017657610176610d82565b911515602090920201528061018a81610de0565b91505061011a565b5060009150505b92915050565b3360009081526004602052604090206101ba90826005610b0f565b507f378e91326e6593b9ecc505ba5e2f175a199e68f0f67132577c5094fdecac6a5833826040516101ec929190610e19565b60405180910390a150565b6002546040805160a081018252600080825260208201859052339282019290925273ffffffffffffffffffffffffffffffffffffffff8516606082015260808101829052600280546001810182556000829052825160049091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810191825560208401517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015560408401517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad08201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560608601517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad19093018054939092169083168117825560808601519596508695939491927fffffffffffffffffffffff0000000000000000000000000000000000000000001617907401000000000000000000000000000000000000000090849081111561039a5761039a610cd7565b021790555050506040808201516060830151336000908152600460205283812073ffffffffffffffffffffffffffffffffffffffff891682529084902093517f58590192acf41202c9c78ebd5bdf7df38cdde909e40da2026097a31a910380639461040d9488948a949193909290610e72565b60405180910390a150505050565b600080610428868661010d565b90506000610436858561010d565b90508180156104425750805b1561045257600292505050610684565b811561046357600192505050610684565b801561047457600092505050610684565b60008060005b60058110156106525760015460009073ffffffffffffffffffffffffffffffffffffffff1663e1dc07618c8c858181106104b6576104b6610d82565b905060200201356040518263ffffffff1660e01b81526004016104db91815260200190565b60e06040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190610ecb565b60015490915060009073ffffffffffffffffffffffffffffffffffffffff1663e1dc07618b8b8681811061056157610561610d82565b905060200201356040518263ffffffff1660e01b815260040161058691815260200190565b60e06040518083038186803b15801561059e57600080fd5b505afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190610ecb565b905060005b600781101561063c578281600781106105f6576105f6610d82565b60200201516106059087610f70565b955081816007811061061957610619610d82565b60200201516106289086610f70565b94508061063481610de0565b9150506105db565b505050808061064a90610de0565b91505061047a565b508161065e8282610f70565b610668908c610f88565b101561067b576000945050505050610684565b60019450505050505b95945050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640160405180910390fd5b61073a828261089e565b5050565b60006002828154811061075357610753610d82565b60009182526020918290206040805160a08101825260049093029091018054835260018101549383019390935260028084015473ffffffffffffffffffffffffffffffffffffffff9081169284019290925260038401549182166060840152919291608084019160ff7401000000000000000000000000000000000000000090910416908111156107e6576107e6610cd7565b60028111156107f7576107f7610cd7565b815250509050806020015142101561080e57600080fd5b60006108427f6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f467016345785d8a000061095b565b600081815260036020526040902084905590506001608083018190525060408051848152602081018390527fde540f9ac7c3840ea842a6d04dd9d17a3ffefcb96dba4655fc9fa801b6e7efd891015b60405180910390a1505050565b6000828152600360205260408120546002805490919081106108c2576108c2610d82565b60009182526020808320600492909202909101848155600380820180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055868452825260409283902054835190815291820185905292507f313cb7879f66195ba45d2e7734345d5f81497e51c4312cbe6131f1c4b37e34159101610891565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016109d8929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610a0593929190610fc3565b602060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061105b565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a090910190925281519183019190912086845292909152610ab1906001610f70565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120949350505050565b6040518060a001604052806005906020820280368337509192915050565b8260058101928215610b3d579160200282015b82811115610b3d578235825591602001919060010190610b22565b50610b49929150610b4d565b5090565b5b80821115610b495760008155600101610b4e565b60008083601f840112610b7457600080fd5b50813567ffffffffffffffff811115610b8c57600080fd5b6020830191508360208260051b8501011115610ba757600080fd5b9250929050565b60008060208385031215610bc157600080fd5b823567ffffffffffffffff811115610bd857600080fd5b610be485828601610b62565b90969095509350505050565b600060a08284031215610c0257600080fd5b8260a083011115610c1257600080fd5b50919050565b60008060408385031215610c2b57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff81168114610c4f57600080fd5b946020939093013593505050565b600080600080600060608688031215610c7557600080fd5b85359450602086013567ffffffffffffffff80821115610c9457600080fd5b610ca089838a01610b62565b90965094506040880135915080821115610cb957600080fd5b50610cc688828901610b62565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310610d41577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060408385031215610d5a57600080fd5b50508035926020909101359150565b600060208284031215610d7b57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e1257610e12610db1565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8316815260c0810160a0836020840137600081529392505050565b8060005b6005811015610e6c578154845260209093019260019182019101610e4d565b50505050565b8681526020810186905273ffffffffffffffffffffffffffffffffffffffff8581166040830152841660608201526101c08101610eb26080830185610e49565b610ec0610120830184610e49565b979650505050505050565b600060e08284031215610edd57600080fd5b82601f830112610eec57600080fd5b60405160e0810181811067ffffffffffffffff82111715610f36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528060e0840185811115610f4b57600080fd5b845b81811015610f65578051835260209283019201610f4d565b509195945050505050565b60008219821115610f8357610f83610db1565b500190565b600082610fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b73ffffffffffffffffffffffffffffffffffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561101357858101830151858201608001528201610ff7565b81811115611025576000608083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160800195945050505050565b60006020828403121561106d57600080fd5b8151801515811461107d57600080fd5b939250505056fea2646970667358221220cf8536e890d75ed3116d292133bdf20a759c169567fa0c6017832cd824a981b064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80636d663261116100505780636d663261146100c757806394985ddd146100e7578063a9df851a146100fa57600080fd5b8063252acdf91461007757806334163ecc1461009f5780634d0d6323146100b4575b600080fd5b61008a610085366004610bae565b61010d565b60405190151581526020015b60405180910390f35b6100b26100ad366004610bf0565b61019f565b005b6100b26100c2366004610c18565b6101f7565b6100da6100d5366004610c5d565b61041b565b6040516100969190610d06565b6100b26100f5366004610d47565b61068d565b6100b2610108366004610d69565b61073e565b6000610117610af1565b60005b6005811015610192578185858381811061013657610136610d82565b905060200201356005811061014d5761014d610d82565b60200201511561016257600192505050610199565b600182826005811061017657610176610d82565b911515602090920201528061018a81610de0565b91505061011a565b5060009150505b92915050565b3360009081526004602052604090206101ba90826005610b0f565b507f378e91326e6593b9ecc505ba5e2f175a199e68f0f67132577c5094fdecac6a5833826040516101ec929190610e19565b60405180910390a150565b6002546040805160a081018252600080825260208201859052339282019290925273ffffffffffffffffffffffffffffffffffffffff8516606082015260808101829052600280546001810182556000829052825160049091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810191825560208401517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015560408401517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad08201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560608601517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad19093018054939092169083168117825560808601519596508695939491927fffffffffffffffffffffff0000000000000000000000000000000000000000001617907401000000000000000000000000000000000000000090849081111561039a5761039a610cd7565b021790555050506040808201516060830151336000908152600460205283812073ffffffffffffffffffffffffffffffffffffffff891682529084902093517f58590192acf41202c9c78ebd5bdf7df38cdde909e40da2026097a31a910380639461040d9488948a949193909290610e72565b60405180910390a150505050565b600080610428868661010d565b90506000610436858561010d565b90508180156104425750805b1561045257600292505050610684565b811561046357600192505050610684565b801561047457600092505050610684565b60008060005b60058110156106525760015460009073ffffffffffffffffffffffffffffffffffffffff1663e1dc07618c8c858181106104b6576104b6610d82565b905060200201356040518263ffffffff1660e01b81526004016104db91815260200190565b60e06040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190610ecb565b60015490915060009073ffffffffffffffffffffffffffffffffffffffff1663e1dc07618b8b8681811061056157610561610d82565b905060200201356040518263ffffffff1660e01b815260040161058691815260200190565b60e06040518083038186803b15801561059e57600080fd5b505afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190610ecb565b905060005b600781101561063c578281600781106105f6576105f6610d82565b60200201516106059087610f70565b955081816007811061061957610619610d82565b60200201516106289086610f70565b94508061063481610de0565b9150506105db565b505050808061064a90610de0565b91505061047a565b508161065e8282610f70565b610668908c610f88565b101561067b576000945050505050610684565b60019450505050505b95945050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640160405180910390fd5b61073a828261089e565b5050565b60006002828154811061075357610753610d82565b60009182526020918290206040805160a08101825260049093029091018054835260018101549383019390935260028084015473ffffffffffffffffffffffffffffffffffffffff9081169284019290925260038401549182166060840152919291608084019160ff7401000000000000000000000000000000000000000090910416908111156107e6576107e6610cd7565b60028111156107f7576107f7610cd7565b815250509050806020015142101561080e57600080fd5b60006108427f6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f467016345785d8a000061095b565b600081815260036020526040902084905590506001608083018190525060408051848152602081018390527fde540f9ac7c3840ea842a6d04dd9d17a3ffefcb96dba4655fc9fa801b6e7efd891015b60405180910390a1505050565b6000828152600360205260408120546002805490919081106108c2576108c2610d82565b60009182526020808320600492909202909101848155600380820180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055868452825260409283902054835190815291820185905292507f313cb7879f66195ba45d2e7734345d5f81497e51c4312cbe6131f1c4b37e34159101610891565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016109d8929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610a0593929190610fc3565b602060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061105b565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a090910190925281519183019190912086845292909152610ab1906001610f70565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120949350505050565b6040518060a001604052806005906020820280368337509192915050565b8260058101928215610b3d579160200282015b82811115610b3d578235825591602001919060010190610b22565b50610b49929150610b4d565b5090565b5b80821115610b495760008155600101610b4e565b60008083601f840112610b7457600080fd5b50813567ffffffffffffffff811115610b8c57600080fd5b6020830191508360208260051b8501011115610ba757600080fd5b9250929050565b60008060208385031215610bc157600080fd5b823567ffffffffffffffff811115610bd857600080fd5b610be485828601610b62565b90969095509350505050565b600060a08284031215610c0257600080fd5b8260a083011115610c1257600080fd5b50919050565b60008060408385031215610c2b57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff81168114610c4f57600080fd5b946020939093013593505050565b600080600080600060608688031215610c7557600080fd5b85359450602086013567ffffffffffffffff80821115610c9457600080fd5b610ca089838a01610b62565b90965094506040880135915080821115610cb957600080fd5b50610cc688828901610b62565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310610d41577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060408385031215610d5a57600080fd5b50508035926020909101359150565b600060208284031215610d7b57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e1257610e12610db1565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8316815260c0810160a0836020840137600081529392505050565b8060005b6005811015610e6c578154845260209093019260019182019101610e4d565b50505050565b8681526020810186905273ffffffffffffffffffffffffffffffffffffffff8581166040830152841660608201526101c08101610eb26080830185610e49565b610ec0610120830184610e49565b979650505050505050565b600060e08284031215610edd57600080fd5b82601f830112610eec57600080fd5b60405160e0810181811067ffffffffffffffff82111715610f36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528060e0840185811115610f4b57600080fd5b845b81811015610f65578051835260209283019201610f4d565b509195945050505050565b60008219821115610f8357610f83610db1565b500190565b600082610fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b73ffffffffffffffffffffffffffffffffffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561101357858101830151858201608001528201610ff7565b81811115611025576000608083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160800195945050505050565b60006020828403121561106d57600080fd5b8151801515811461107d57600080fd5b939250505056fea2646970667358221220cf8536e890d75ed3116d292133bdf20a759c169567fa0c6017832cd824a981b064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2082,
        "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FootiumLitePlayers)2949"
      },
      {
        "astId": 2086,
        "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
        "label": "matches",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Match)2079_storage)dyn_storage"
      },
      {
        "astId": 2090,
        "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
        "label": "requestToMatch",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2096,
        "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
        "label": "formations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)5_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Match)2079_storage)dyn_storage": {
        "base": "t_struct(Match)2079_storage",
        "encoding": "dynamic_array",
        "label": "struct FootiumLiteFriendlies.Match[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FootiumLitePlayers)2949": {
        "encoding": "inplace",
        "label": "contract FootiumLitePlayers",
        "numberOfBytes": "20"
      },
      "t_enum(MatchStatus)2063": {
        "encoding": "inplace",
        "label": "enum FootiumLiteFriendlies.MatchStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)5_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[5])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)5_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Match)2079_storage": {
        "encoding": "inplace",
        "label": "struct FootiumLiteFriendlies.Match",
        "members": [
          {
            "astId": 2069,
            "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2071,
            "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2073,
            "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
            "label": "accountA",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2075,
            "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
            "label": "accountB",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2078,
            "contract": "src/FootiumLiteFriendlies/FootiumLiteFriendlies.sol:FootiumLiteFriendlies",
            "label": "status",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(MatchStatus)2063"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}