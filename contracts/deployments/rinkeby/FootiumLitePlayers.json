{
  "address": "0x832f7461Fd2FaBd90D6eCA465FbB9F4914DBFb6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Svgs",
          "name": "_svgs",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_firstNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_lastNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "goalKeeper",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256[7]",
          "name": "traits",
          "type": "uint256[7]"
        }
      ],
      "name": "PlayerSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPlayerSvg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraits",
      "outputs": [
        {
          "internalType": "uint256[7]",
          "name": "",
          "type": "uint256[7]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[7]",
          "name": "newTraits",
          "type": "uint256[7]"
        }
      ],
      "name": "updateNumericTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x024be6c8dc8978696cb5c24a22cfa46514ef21daa1f12d8c18c5ce6e01c98c5a",
  "receipt": {
    "to": null,
    "from": "0xb19BC46C52A1352A071fe2389503B6FE1ABD50Ff",
    "contractAddress": "0x832f7461Fd2FaBd90D6eCA465FbB9F4914DBFb6e",
    "transactionIndex": 7,
    "gasUsed": "3312524",
    "logsBloom": "0x
    "blockHash": "0xfd16ceaac1b939b7f1390c9d3ad81b54a505e026f205dad174d82e1b1cb5e795",
    "transactionHash": "0x024be6c8dc8978696cb5c24a22cfa46514ef21daa1f12d8c18c5ce6e01c98c5a",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 10199394,
        "transactionHash": "0x024be6c8dc8978696cb5c24a22cfa46514ef21daa1f12d8c18c5ce6e01c98c5a",
        "address": "0x832f7461Fd2FaBd90D6eCA465FbB9F4914DBFb6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b19bc46c52a1352a071fe2389503b6fe1abd50ff"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xfd16ceaac1b939b7f1390c9d3ad81b54a505e026f205dad174d82e1b1cb5e795"
      }
    ],
    "blockNumber": 10199394,
    "cumulativeGasUsed": "10048051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d5Ad3C14AFf68cf121aEB316232771443834A84",
    [
      "Fraser",
      "George",
      "Jordan",
      "Sam"
    ],
    [
      "Benton",
      "Scott",
      "Lord",
      "Jackson"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "60383510c8574857e1f67441cf4292bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Svgs\",\"name\":\"_svgs\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_firstNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_lastNames\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"goalKeeper\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[7]\",\"name\":\"traits\",\"type\":\"uint256[7]\"}],\"name\":\"PlayerSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"newTraits\",\"type\":\"uint256[7]\"}],\"name\":\"updateNumericTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/FootiumLitePlayers/FootiumLitePlayers.sol\":\"FootiumLitePlayers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/FootiumLitePlayers/FootiumLitePlayers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Svgs} from \\\"../Svgs/Svgs.sol\\\";\\n\\ncontract FootiumLitePlayers is ERC721, Ownable {\\n    uint256 constant KEEPER_PROBABILITY_DENOMINATOR = 6;\\n    uint256 constant NUMBERIC_TRAITS_NUM = 7;\\n    uint256 constant IMAGE_TRAITS_NUM = 7;\\n    uint256 constant MAX_STAT = 11;\\n\\n    uint256 constant MINT_PRICE = 0.01 ether;\\n\\n    uint256[IMAGE_TRAITS_NUM] maxImageTraits = [5, 10, 8, 10, 9, 3, 10];\\n\\n    struct Player {\\n        bool keeper;\\n        string firstName;\\n        string lastName;\\n        uint256[NUMBERIC_TRAITS_NUM] numericTraits;\\n        uint256[IMAGE_TRAITS_NUM] imageTraits;\\n    }\\n\\n    Svgs svgs;\\n    string[] firstNames;\\n    string[] lastNames;\\n    mapping(uint256 => Player) playersStats;\\n\\n    event PlayerSigned(uint256 tokenId, bool goalKeeper, uint256[NUMBERIC_TRAITS_NUM] traits);\\n\\n    constructor(\\n        Svgs _svgs,\\n        string[] memory _firstNames,\\n        string[] memory _lastNames\\n    ) ERC721(\\\"FootiumLitePlayers\\\", \\\"FLP\\\") {\\n        svgs = _svgs;\\n        firstNames = _firstNames;\\n        lastNames = _lastNames;\\n    }\\n\\n    /* External */\\n\\n    function mint(uint256 tokenId) external payable {\\n        require(msg.value == MINT_PRICE);\\n\\n        playersStats[tokenId].firstName = firstNames[\\n            uint256(keccak256(abi.encode(tokenId, \\\"first\\\"))) % firstNames.length\\n        ];\\n        playersStats[tokenId].lastName = lastNames[uint256(keccak256(abi.encode(tokenId, \\\"last\\\"))) % lastNames.length];\\n\\n        bool keeper = (tokenId % KEEPER_PROBABILITY_DENOMINATOR) == 0;\\n        playersStats[tokenId].keeper = keeper;\\n\\n        for (uint256 i; i < NUMBERIC_TRAITS_NUM; i++) {\\n            playersStats[tokenId].numericTraits[i] = uint256(keccak256(abi.encode(tokenId, i))) % MAX_STAT;\\n        }\\n\\n        for (uint256 i; i < IMAGE_TRAITS_NUM; i++) {\\n            playersStats[tokenId].imageTraits[i] = uint256(keccak256(abi.encode(tokenId, i))) % maxImageTraits[i];\\n        }\\n        _mint(msg.sender, tokenId);\\n\\n        emit PlayerSigned(tokenId, keeper, playersStats[tokenId].numericTraits);\\n    }\\n\\n    function updateNumericTraits(uint256 tokenId, uint256[NUMBERIC_TRAITS_NUM] calldata newTraits) external onlyOwner {\\n        playersStats[tokenId].numericTraits = newTraits;\\n    }\\n\\n    /* View */\\n\\n    function getTraits(uint256 tokenId) public view returns (uint256[NUMBERIC_TRAITS_NUM] memory) {\\n        return playersStats[tokenId].numericTraits;\\n    }\\n\\n    function getPlayerSvg(uint256 tokenId) public view returns (string memory) {\\n        string memory part = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 210 297\\\">',\\n                svgs.getSvg(\\\"pose\\\", playersStats[tokenId].imageTraits[0]),\\n                svgs.getSvg(\\\"facial\\\", playersStats[tokenId].imageTraits[4]),\\n                svgs.getSvg(\\\"hair\\\", playersStats[tokenId].imageTraits[1]),\\n                svgs.getSvg(\\\"brow\\\", playersStats[tokenId].imageTraits[2]),\\n                svgs.getSvg(\\\"eye\\\", playersStats[tokenId].imageTraits[3])\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    part,\\n                    svgs.getSvg(\\\"mouth\\\", playersStats[tokenId].imageTraits[5]),\\n                    svgs.getSvg(\\\"nose\\\", playersStats[tokenId].imageTraits[6]),\\n                    svgs.getSvg(\\\"shirt\\\", 0),\\n                    svgs.getSvg(\\\"shorts\\\", 0),\\n                    svgs.getSvg(\\\"socks\\\", 0),\\n                    svgs.getSvg(\\\"shoes\\\", 0),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9fe4e0cb5f3d2bfa33fffcc2626794941551b978c2b7d9a1f8cfcdcf12a135e9\",\"license\":\"MIT\"},\"src/Svgs/Svgs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Svgs is Ownable {\\n    mapping(bytes32 => uint256) private ids;\\n    mapping(bytes32 => mapping(uint256 => string)) private svgs;\\n\\n    function storeSvg(string calldata _svg, bytes32 _svgType) external onlyOwner {\\n        svgs[_svgType][ids[_svgType]] = _svg;\\n        ids[_svgType]++;\\n    }\\n\\n    function getSvg(bytes32 _svgType, uint256 _id) public view returns (string memory) {\\n        return svgs[_svgType][_id];\\n    }\\n}\\n\",\"keccak256\":\"0x5b1c6dc02874d14366fdc3df29af6df4b041b3cb7312d819f414cde18a0e013b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260056080908152600a60a0819052600860c05260e0819052600961010052600361012052610140526200003c90600790816200019b565b503480156200004a57600080fd5b50604051620037cf380380620037cf8339810160408190526200006d91620004a9565b6040805180820182526012815271466f6f7469756d4c697465506c617965727360701b6020808301918252835180850190945260038452620464c560ec1b908401528151919291620000c291600091620001e3565b508051620000d8906001906020840190620001e3565b505050620000f5620000ef6200014560201b60201c565b62000149565b600e80546001600160a01b0319166001600160a01b03851617905581516200012590600f90602085019062000260565b5080516200013b90601090602084019062000260565b5050505062000570565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8260078101928215620001d1579160200282015b82811115620001d1578251829060ff16905591602001919060010190620001af565b50620001df929150620002c0565b5090565b828054620001f19062000533565b90600052602060002090601f016020900481019282620002155760008555620001d1565b82601f106200023057805160ff1916838001178555620001d1565b82800160010185558215620001d1579182015b82811115620001d157825182559160200191906001019062000243565b828054828255906000526020600020908101928215620002b2579160200282015b82811115620002b25782518051620002a1918491602090910190620001e3565b509160200191906001019062000281565b50620001df929150620002d7565b5b80821115620001df5760008155600101620002c1565b80821115620001df576000620002ee8282620002f8565b50600101620002d7565b508054620003069062000533565b6000825580601f1062000317575050565b601f016020900490600052602060002090810190620003379190620002c0565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200037b576200037b6200033a565b604052919050565b6000601f83818401126200039657600080fd5b825160206001600160401b0380831115620003b557620003b56200033a565b8260051b620003c683820162000350565b9384528681018301938381019089861115620003e157600080fd5b84890192505b858310156200049c57825184811115620004015760008081fd5b8901603f81018b13620004145760008081fd5b85810151858111156200042b576200042b6200033a565b6200043e818a01601f1916880162000350565b81815260408d81848601011115620004565760008081fd5b60005b8381101562000476578481018201518382018b0152890162000459565b83811115620004885760008a85850101525b5050845250509184019190840190620003e7565b9998505050505050505050565b600080600060608486031215620004bf57600080fd5b83516001600160a01b0381168114620004d757600080fd5b60208501519093506001600160401b0380821115620004f557600080fd5b620005038783880162000383565b935060408601519150808211156200051a57600080fd5b50620005298682870162000383565b9150509250925092565b600181811c908216806200054857607f821691505b602082108114156200056a57634e487b7160e01b600052602260045260246000fd5b50919050565b61324f80620005806000396000f3fe60806040526004361061015f5760003560e01c8063715018a6116100c0578063b88d4fde11610074578063e1dc076111610059578063e1dc0761146103b8578063e985e9c5146103e5578063f2fde38b1461043b57600080fd5b8063b88d4fde14610378578063c87b56dd1461039857600080fd5b806395d89b41116100a557806395d89b4114610330578063a0712d6814610345578063a22cb4651461035857600080fd5b8063715018a6146102f05780638da5cb5b1461030557600080fd5b806323b872dd116101175780634c776b57116100fc5780634c776b57146102825780636352211e146102a257806370a08231146102c257600080fd5b806323b872dd1461024257806342842e0e1461026257600080fd5b8063081812fc11610148578063081812fc146101bb578063095ea7b31461020057806318439bc81461022257600080fd5b806301ffc9a71461016457806306fdde0314610199575b600080fd5b34801561017057600080fd5b5061018461017f3660046129e8565b61045b565b60405190151581526020015b60405180910390f35b3480156101a557600080fd5b506101ae610540565b6040516101909190612a7b565b3480156101c757600080fd5b506101db6101d6366004612a8e565b6105d2565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b34801561020c57600080fd5b5061022061021b366004612ad0565b6106b1565b005b34801561022e57600080fd5b5061022061023d366004612afa565b61083e565b34801561024e57600080fd5b5061022061025d366004612b30565b6108dc565b34801561026e57600080fd5b5061022061027d366004612b30565b61097d565b34801561028e57600080fd5b506101ae61029d366004612a8e565b610998565b3480156102ae57600080fd5b506101db6102bd366004612a8e565b61149d565b3480156102ce57600080fd5b506102e26102dd366004612b6c565b61154f565b604051908152602001610190565b3480156102fc57600080fd5b5061022061161d565b34801561031157600080fd5b5060065473ffffffffffffffffffffffffffffffffffffffff166101db565b34801561033c57600080fd5b506101ae6116aa565b610220610353366004612a8e565b6116b9565b34801561036457600080fd5b50610220610373366004612b87565b6119d9565b34801561038457600080fd5b50610220610393366004612c87565b6119e8565b3480156103a457600080fd5b506101ae6103b3366004612a8e565b611a90565b3480156103c457600080fd5b506103d86103d3366004612a8e565b611b9d565b6040516101909190612d32565b3480156103f157600080fd5b50610184610400366004612d63565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561044757600080fd5b50610220610456366004612b6c565b611bec565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806104ee57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061053a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461054f90612d96565b80601f016020809104026020016040519081016040528092919081815260200182805461057b90612d96565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106bc8261149d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b3373ffffffffffffffffffffffffffffffffffffffff821614806107a357506107a38133610400565b61082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161067f565b6108398383611d1c565b505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146108bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b6000828152601160205260409020610839906003018260076128ce565b6108e63382611dbc565b610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161067f565b610839838383611f2c565b610839838383604051806020016040528060008152506119e8565b600e54600082815260116020526040808220600a015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f706f7365000000000000000000000000000000000000000000000000000000006004820152602481019190915260609273ffffffffffffffffffffffffffffffffffffffff169063f300633d9060440160006040518083038186803b158015610a3c57600080fd5b505afa158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a969190810190612e19565b600e8054600086815260116020526040908190209092015491517ff300633d0000000000000000000000000000000000000000000000000000000081527f66616369616c00000000000000000000000000000000000000000000000000006004820152602481019290925273ffffffffffffffffffffffffffffffffffffffff169063f300633d9060440160006040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b939190810190612e19565b600e5460008681526011602052604090819020600b015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f68616972000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c919190810190612e19565b600e5460008781526011602052604090819020600c015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f62726f77000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610d3557600080fd5b505afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d8f9190810190612e19565b600e5460008881526011602052604090819020600d015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f65796500000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e8d9190810190612e19565b604051602001610ea1959493929190612e90565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152828252600e546000878152601160205292909220600f01547ff300633d0000000000000000000000000000000000000000000000000000000084527f6d6f757468000000000000000000000000000000000000000000000000000000600485015260248401529250829173ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610fca9190810190612e19565b600e54600086815260116020526040908190206010015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f6e6f7365000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561106e57600080fd5b505afa158015611082573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110c89190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f736869727400000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561115857600080fd5b505afa15801561116c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111b29190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f73686f727473000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261129c9190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f736f636b7300000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113869190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f73686f657300000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114709190810190612e19565b6040516020016114869796959493929190612f99565b604051602081830303815290604052915050919050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff168061053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161067f565b600073ffffffffffffffffffffffffffffffffffffffff82166115f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161067f565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60065473ffffffffffffffffffffffffffffffffffffffff16331461169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b6116a86000612193565b565b60606001805461054f90612d96565b662386f26fc1000034146116cc57600080fd5b600f8054604080516020810185905280820191909152600560608201527f6669727374000000000000000000000000000000000000000000000000000000608082015260a0016040516020818303038152906040528051906020012060001c611735919061307f565b8154811061174557611745612dea565b906000526020600020016011600083815260200190815260200160002060010190805461177190612d96565b61177c92919061290c565b5060108054604080516020810185905280820191909152600460608201527f6c61737400000000000000000000000000000000000000000000000000000000608082015260a0016040516020818303038152906040528051906020012060001c6117e6919061307f565b815481106117f6576117f6612dea565b906000526020600020016011600083815260200190815260200160002060020190805461182290612d96565b61182d92919061290c565b50600061183b60068361307f565b600083815260116020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921592831790559091505b60078110156118eb57604080516020808201869052818301849052825180830384018152606090920190925280519101206118b590600b9061307f565b600084815260116020526040902060030182600781106118d7576118d7612dea565b0155806118e3816130c2565b915050611878565b5060005b600781101561197a576007816007811061190b5761190b612dea565b015460408051602081018690529081018390526060016040516020818303038152906040528051906020012060001c611944919061307f565b6000848152601160205260409020600a01826007811061196657611966612dea565b015580611972816130c2565b9150506118ef565b50611985338361220a565b7f590f064aa718c87d4487533ad7e291a0e9a71c1386c18c810a1fc02b05c99af88282601160008681526020019081526020016000206003016040516119cd939291906130fb565b60405180910390a15050565b6119e43383836123cc565b5050565b6119f23383611dbc565b611a7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161067f565b611a8a848484846124fa565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16611b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161067f565b6000611b5b60408051602081019091526000815290565b90506000815111611b7b5760405180602001604052806000815250611b96565b80611b858461259d565b604051602001611486929190613141565b9392505050565b611ba5612987565b60008281526011602052604090819020815160e0810190925260030160078282826020028201915b815481526020019060010190808311611bcd5750505050509050919050565b60065473ffffffffffffffffffffffffffffffffffffffff163314611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff8116611d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067f565b611d1981612193565b50565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190611d768261149d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16611e6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161067f565b6000611e788361149d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ee757508373ffffffffffffffffffffffffffffffffffffffff16611ecf846105d2565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f24575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16611f4c8261149d565b73ffffffffffffffffffffffffffffffffffffffff1614611fef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606482015260840161067f565b73ffffffffffffffffffffffffffffffffffffffff8216612091576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161067f565b61209c600082611d1c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081208054600192906120d2908490613170565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080546001929061210d908490613187565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8216612287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161067f565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290612349908490613187565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612505848484611f2c565b612511848484846126cf565b611a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067f565b6060816125dd57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561260757806125f1816130c2565b91506126009050600a8361319f565b91506125e1565b60008167ffffffffffffffff81111561262257612622612bc3565b6040519080825280601f01601f19166020018201604052801561264c576020820181803683370190505b5090505b8415611f2457612661600183613170565b915061266e600a8661307f565b612679906030613187565b60f81b81838151811061268e5761268e612dea565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506126c8600a8661319f565b9450612650565b600073ffffffffffffffffffffffffffffffffffffffff84163b156128c3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906127469033908990889088906004016131b3565b602060405180830381600087803b15801561276057600080fd5b505af19250505080156127ae575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526127ab918101906131fc565b60015b612878573d8080156127dc576040519150601f19603f3d011682016040523d82523d6000602084013e6127e1565b606091505b508051612870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067f565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611f24565b506001949350505050565b82600781019282156128fc579160200282015b828111156128fc5782358255916020019190600101906128e1565b506129089291506129a5565b5090565b82805461291890612d96565b90600052602060002090601f01602090048101928261293a57600085556128fc565b82601f1061294b57805485556128fc565b828001600101855582156128fc57600052602060002091601f016020900482015b828111156128fc57825482559160010191906001019061296c565b6040518060e001604052806007906020820280368337509192915050565b5b8082111561290857600081556001016129a6565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d1957600080fd5b6000602082840312156129fa57600080fd5b8135611b96816129ba565b60005b83811015612a20578181015183820152602001612a08565b83811115611a8a5750506000910152565b60008151808452612a49816020860160208601612a05565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611b966020830184612a31565b600060208284031215612aa057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612acb57600080fd5b919050565b60008060408385031215612ae357600080fd5b612aec83612aa7565b946020939093013593505050565b600080610100808486031215612b0f57600080fd5b83359250848185011115612b2257600080fd5b506020830190509250929050565b600080600060608486031215612b4557600080fd5b612b4e84612aa7565b9250612b5c60208501612aa7565b9150604084013590509250925092565b600060208284031215612b7e57600080fd5b611b9682612aa7565b60008060408385031215612b9a57600080fd5b612ba383612aa7565b915060208301358015158114612bb857600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612c3957612c39612bc3565b604052919050565b600067ffffffffffffffff821115612c5b57612c5b612bc3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060008060808587031215612c9d57600080fd5b612ca685612aa7565b9350612cb460208601612aa7565b925060408501359150606085013567ffffffffffffffff811115612cd757600080fd5b8501601f81018713612ce857600080fd5b8035612cfb612cf682612c41565b612bf2565b818152886020838501011115612d1057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60e08101818360005b6007811015612d5a578151835260209283019290910190600101612d3b565b50505092915050565b60008060408385031215612d7657600080fd5b612d7f83612aa7565b9150612d8d60208401612aa7565b90509250929050565b600181811c90821680612daa57607f821691505b60208210811415612de4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612e2b57600080fd5b815167ffffffffffffffff811115612e4257600080fd5b8201601f81018413612e5357600080fd5b8051612e61612cf682612c41565b818152856020838501011115612e7657600080fd5b612e87826020830160208601612a05565b95945050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32308152600060207f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e818401527f77332e6f72672f313939392f786c696e6b222076696577426f783d223020302060408401527f32313020323937223e000000000000000000000000000000000000000000000060608401528751612f3a8160698601848c01612a05565b875190840190612f508160698401858c01612a05565b8751910190612f658160698401858b01612a05565b8651910160690190612f7a8183858a01612a05565b8551910190612f8c8183858901612a05565b0198975050505050505050565b600088516020612fac8285838e01612a05565b895191840191612fbf8184848e01612a05565b8951920191612fd18184848d01612a05565b8851920191612fe38184848c01612a05565b8751920191612ff58184848b01612a05565b86519201916130078184848a01612a05565b85519201916130198184848901612a05565b7f3c2f7376673e00000000000000000000000000000000000000000000000000009201918252506006019998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261308e5761308e613050565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130f4576130f4613093565b5060010190565b600061012082019050848252602084151581840152604083018460005b600781101561313557815483529183019160019182019101613118565b50505050949350505050565b60008351613153818460208801612a05565b835190830190613167818360208801612a05565b01949350505050565b60008282101561318257613182613093565b500390565b6000821982111561319a5761319a613093565b500190565b6000826131ae576131ae613050565b500490565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526131f26080830184612a31565b9695505050505050565b60006020828403121561320e57600080fd5b8151611b96816129ba56fea26469706673582212202f14f92a1baf613a49e0cda83170542fbdfbaafbf481cef87a40604bf2cd4b8464736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061015f5760003560e01c8063715018a6116100c0578063b88d4fde11610074578063e1dc076111610059578063e1dc0761146103b8578063e985e9c5146103e5578063f2fde38b1461043b57600080fd5b8063b88d4fde14610378578063c87b56dd1461039857600080fd5b806395d89b41116100a557806395d89b4114610330578063a0712d6814610345578063a22cb4651461035857600080fd5b8063715018a6146102f05780638da5cb5b1461030557600080fd5b806323b872dd116101175780634c776b57116100fc5780634c776b57146102825780636352211e146102a257806370a08231146102c257600080fd5b806323b872dd1461024257806342842e0e1461026257600080fd5b8063081812fc11610148578063081812fc146101bb578063095ea7b31461020057806318439bc81461022257600080fd5b806301ffc9a71461016457806306fdde0314610199575b600080fd5b34801561017057600080fd5b5061018461017f3660046129e8565b61045b565b60405190151581526020015b60405180910390f35b3480156101a557600080fd5b506101ae610540565b6040516101909190612a7b565b3480156101c757600080fd5b506101db6101d6366004612a8e565b6105d2565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b34801561020c57600080fd5b5061022061021b366004612ad0565b6106b1565b005b34801561022e57600080fd5b5061022061023d366004612afa565b61083e565b34801561024e57600080fd5b5061022061025d366004612b30565b6108dc565b34801561026e57600080fd5b5061022061027d366004612b30565b61097d565b34801561028e57600080fd5b506101ae61029d366004612a8e565b610998565b3480156102ae57600080fd5b506101db6102bd366004612a8e565b61149d565b3480156102ce57600080fd5b506102e26102dd366004612b6c565b61154f565b604051908152602001610190565b3480156102fc57600080fd5b5061022061161d565b34801561031157600080fd5b5060065473ffffffffffffffffffffffffffffffffffffffff166101db565b34801561033c57600080fd5b506101ae6116aa565b610220610353366004612a8e565b6116b9565b34801561036457600080fd5b50610220610373366004612b87565b6119d9565b34801561038457600080fd5b50610220610393366004612c87565b6119e8565b3480156103a457600080fd5b506101ae6103b3366004612a8e565b611a90565b3480156103c457600080fd5b506103d86103d3366004612a8e565b611b9d565b6040516101909190612d32565b3480156103f157600080fd5b50610184610400366004612d63565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561044757600080fd5b50610220610456366004612b6c565b611bec565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806104ee57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061053a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461054f90612d96565b80601f016020809104026020016040519081016040528092919081815260200182805461057b90612d96565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106bc8261149d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b3373ffffffffffffffffffffffffffffffffffffffff821614806107a357506107a38133610400565b61082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161067f565b6108398383611d1c565b505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146108bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b6000828152601160205260409020610839906003018260076128ce565b6108e63382611dbc565b610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161067f565b610839838383611f2c565b610839838383604051806020016040528060008152506119e8565b600e54600082815260116020526040808220600a015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f706f7365000000000000000000000000000000000000000000000000000000006004820152602481019190915260609273ffffffffffffffffffffffffffffffffffffffff169063f300633d9060440160006040518083038186803b158015610a3c57600080fd5b505afa158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a969190810190612e19565b600e8054600086815260116020526040908190209092015491517ff300633d0000000000000000000000000000000000000000000000000000000081527f66616369616c00000000000000000000000000000000000000000000000000006004820152602481019290925273ffffffffffffffffffffffffffffffffffffffff169063f300633d9060440160006040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b939190810190612e19565b600e5460008681526011602052604090819020600b015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f68616972000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c919190810190612e19565b600e5460008781526011602052604090819020600c015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f62726f77000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610d3557600080fd5b505afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d8f9190810190612e19565b600e5460008881526011602052604090819020600d015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f65796500000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e8d9190810190612e19565b604051602001610ea1959493929190612e90565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152828252600e546000878152601160205292909220600f01547ff300633d0000000000000000000000000000000000000000000000000000000084527f6d6f757468000000000000000000000000000000000000000000000000000000600485015260248401529250829173ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610fca9190810190612e19565b600e54600086815260116020526040908190206010015490517ff300633d0000000000000000000000000000000000000000000000000000000081527f6e6f7365000000000000000000000000000000000000000000000000000000006004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561106e57600080fd5b505afa158015611082573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110c89190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f736869727400000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561115857600080fd5b505afa15801561116c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111b29190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f73686f727473000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261129c9190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f736f636b7300000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113869190810190612e19565b600e546040517ff300633d0000000000000000000000000000000000000000000000000000000081527f73686f657300000000000000000000000000000000000000000000000000000060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9091169063f300633d9060440160006040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114709190810190612e19565b6040516020016114869796959493929190612f99565b604051602081830303815290604052915050919050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff168061053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161067f565b600073ffffffffffffffffffffffffffffffffffffffff82166115f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161067f565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60065473ffffffffffffffffffffffffffffffffffffffff16331461169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b6116a86000612193565b565b60606001805461054f90612d96565b662386f26fc1000034146116cc57600080fd5b600f8054604080516020810185905280820191909152600560608201527f6669727374000000000000000000000000000000000000000000000000000000608082015260a0016040516020818303038152906040528051906020012060001c611735919061307f565b8154811061174557611745612dea565b906000526020600020016011600083815260200190815260200160002060010190805461177190612d96565b61177c92919061290c565b5060108054604080516020810185905280820191909152600460608201527f6c61737400000000000000000000000000000000000000000000000000000000608082015260a0016040516020818303038152906040528051906020012060001c6117e6919061307f565b815481106117f6576117f6612dea565b906000526020600020016011600083815260200190815260200160002060020190805461182290612d96565b61182d92919061290c565b50600061183b60068361307f565b600083815260116020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921592831790559091505b60078110156118eb57604080516020808201869052818301849052825180830384018152606090920190925280519101206118b590600b9061307f565b600084815260116020526040902060030182600781106118d7576118d7612dea565b0155806118e3816130c2565b915050611878565b5060005b600781101561197a576007816007811061190b5761190b612dea565b015460408051602081018690529081018390526060016040516020818303038152906040528051906020012060001c611944919061307f565b6000848152601160205260409020600a01826007811061196657611966612dea565b015580611972816130c2565b9150506118ef565b50611985338361220a565b7f590f064aa718c87d4487533ad7e291a0e9a71c1386c18c810a1fc02b05c99af88282601160008681526020019081526020016000206003016040516119cd939291906130fb565b60405180910390a15050565b6119e43383836123cc565b5050565b6119f23383611dbc565b611a7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161067f565b611a8a848484846124fa565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16611b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161067f565b6000611b5b60408051602081019091526000815290565b90506000815111611b7b5760405180602001604052806000815250611b96565b80611b858461259d565b604051602001611486929190613141565b9392505050565b611ba5612987565b60008281526011602052604090819020815160e0810190925260030160078282826020028201915b815481526020019060010190808311611bcd5750505050509050919050565b60065473ffffffffffffffffffffffffffffffffffffffff163314611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff8116611d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067f565b611d1981612193565b50565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190611d768261149d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16611e6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161067f565b6000611e788361149d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ee757508373ffffffffffffffffffffffffffffffffffffffff16611ecf846105d2565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f24575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16611f4c8261149d565b73ffffffffffffffffffffffffffffffffffffffff1614611fef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606482015260840161067f565b73ffffffffffffffffffffffffffffffffffffffff8216612091576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161067f565b61209c600082611d1c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081208054600192906120d2908490613170565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080546001929061210d908490613187565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8216612287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161067f565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290612349908490613187565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612505848484611f2c565b612511848484846126cf565b611a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067f565b6060816125dd57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561260757806125f1816130c2565b91506126009050600a8361319f565b91506125e1565b60008167ffffffffffffffff81111561262257612622612bc3565b6040519080825280601f01601f19166020018201604052801561264c576020820181803683370190505b5090505b8415611f2457612661600183613170565b915061266e600a8661307f565b612679906030613187565b60f81b81838151811061268e5761268e612dea565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506126c8600a8661319f565b9450612650565b600073ffffffffffffffffffffffffffffffffffffffff84163b156128c3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906127469033908990889088906004016131b3565b602060405180830381600087803b15801561276057600080fd5b505af19250505080156127ae575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526127ab918101906131fc565b60015b612878573d8080156127dc576040519150601f19603f3d011682016040523d82523d6000602084013e6127e1565b606091505b508051612870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067f565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611f24565b506001949350505050565b82600781019282156128fc579160200282015b828111156128fc5782358255916020019190600101906128e1565b506129089291506129a5565b5090565b82805461291890612d96565b90600052602060002090601f01602090048101928261293a57600085556128fc565b82601f1061294b57805485556128fc565b828001600101855582156128fc57600052602060002091601f016020900482015b828111156128fc57825482559160010191906001019061296c565b6040518060e001604052806007906020820280368337509192915050565b5b8082111561290857600081556001016129a6565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d1957600080fd5b6000602082840312156129fa57600080fd5b8135611b96816129ba565b60005b83811015612a20578181015183820152602001612a08565b83811115611a8a5750506000910152565b60008151808452612a49816020860160208601612a05565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611b966020830184612a31565b600060208284031215612aa057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612acb57600080fd5b919050565b60008060408385031215612ae357600080fd5b612aec83612aa7565b946020939093013593505050565b600080610100808486031215612b0f57600080fd5b83359250848185011115612b2257600080fd5b506020830190509250929050565b600080600060608486031215612b4557600080fd5b612b4e84612aa7565b9250612b5c60208501612aa7565b9150604084013590509250925092565b600060208284031215612b7e57600080fd5b611b9682612aa7565b60008060408385031215612b9a57600080fd5b612ba383612aa7565b915060208301358015158114612bb857600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612c3957612c39612bc3565b604052919050565b600067ffffffffffffffff821115612c5b57612c5b612bc3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060008060808587031215612c9d57600080fd5b612ca685612aa7565b9350612cb460208601612aa7565b925060408501359150606085013567ffffffffffffffff811115612cd757600080fd5b8501601f81018713612ce857600080fd5b8035612cfb612cf682612c41565b612bf2565b818152886020838501011115612d1057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60e08101818360005b6007811015612d5a578151835260209283019290910190600101612d3b565b50505092915050565b60008060408385031215612d7657600080fd5b612d7f83612aa7565b9150612d8d60208401612aa7565b90509250929050565b600181811c90821680612daa57607f821691505b60208210811415612de4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612e2b57600080fd5b815167ffffffffffffffff811115612e4257600080fd5b8201601f81018413612e5357600080fd5b8051612e61612cf682612c41565b818152856020838501011115612e7657600080fd5b612e87826020830160208601612a05565b95945050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32308152600060207f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e818401527f77332e6f72672f313939392f786c696e6b222076696577426f783d223020302060408401527f32313020323937223e000000000000000000000000000000000000000000000060608401528751612f3a8160698601848c01612a05565b875190840190612f508160698401858c01612a05565b8751910190612f658160698401858b01612a05565b8651910160690190612f7a8183858a01612a05565b8551910190612f8c8183858901612a05565b0198975050505050505050565b600088516020612fac8285838e01612a05565b895191840191612fbf8184848e01612a05565b8951920191612fd18184848d01612a05565b8851920191612fe38184848c01612a05565b8751920191612ff58184848b01612a05565b86519201916130078184848a01612a05565b85519201916130198184848901612a05565b7f3c2f7376673e00000000000000000000000000000000000000000000000000009201918252506006019998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261308e5761308e613050565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130f4576130f4613093565b5060010190565b600061012082019050848252602084151581840152604083018460005b600781101561313557815483529183019160019182019101613118565b50505050949350505050565b60008351613153818460208801612a05565b835190830190613167818360208801612a05565b01949350505050565b60008282101561318257613182613093565b500390565b6000821982111561319a5761319a613093565b500190565b6000826131ae576131ae613050565b500490565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526131f26080830184612a31565b9695505050505050565b60006020828403121561320e57600080fd5b8151611b96816129ba56fea26469706673582212202f14f92a1baf613a49e0cda83170542fbdfbaafbf481cef87a40604bf2cd4b8464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 515,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 517,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 521,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 525,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 529,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 535,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 392,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2579,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "maxImageTraits",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)7_storage"
      },
      {
        "astId": 2597,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "svgs",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Svgs)3007"
      },
      {
        "astId": 2600,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "firstNames",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2603,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "lastNames",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2608,
        "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
        "label": "playersStats",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Player)2594_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)7_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[7]",
        "numberOfBytes": "224"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Svgs)3007": {
        "encoding": "inplace",
        "label": "contract Svgs",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Player)2594_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FootiumLitePlayers.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2594_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Player)2594_storage": {
        "encoding": "inplace",
        "label": "struct FootiumLitePlayers.Player",
        "members": [
          {
            "astId": 2581,
            "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
            "label": "keeper",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2583,
            "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
            "label": "firstName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2585,
            "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
            "label": "lastName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2589,
            "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
            "label": "numericTraits",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)7_storage"
          },
          {
            "astId": 2593,
            "contract": "src/FootiumLitePlayers/FootiumLitePlayers.sol:FootiumLitePlayers",
            "label": "imageTraits",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)7_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}