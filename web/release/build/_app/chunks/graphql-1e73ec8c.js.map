{"version":3,"file":"graphql-1e73ec8c.js","sources":["../../../../../src/lib/components/styled/Modal.svelte","../../../../../src/lib/blockchain/contracts.ts","../../../../../src/lib/time.ts","../../../../../src/lib/blockchain/chainTempo.ts","../../../../../src/lib/blockchain/wallet.ts","../../../../../src/lib/blockchain/WalletAccess.svelte","../../../../../src/lib/utils/graphql/constants.ts","../../../../../src/lib/utils/graphql/endpoint.ts","../../../../../src/lib/blockchain/subgraph.ts","../../../../../src/lib/utils/stores/base.ts","../../../../../src/lib/utils/stores/graphql.ts"],"sourcesContent":["<script lang=\"ts\">\n  import {createEventDispatcher, onDestroy} from 'svelte';\n  export let globalCloseButton = false;\n  export let closeButton = false;\n  export let title = '';\n  export let cancelable = true;\n\n  const dispatch = createEventDispatcher();\n  const close = () => cancelable && dispatch('close');\n\n  let modal: Element;\n\n  function handle_keydown(evt: KeyboardEvent | undefined) {\n    evt = evt || (window.event as KeyboardEvent);\n    var isEscape = false;\n    if ('key' in evt) {\n      isEscape = evt.key === 'Escape' || evt.key === 'Esc';\n    } else {\n      isEscape = (evt as KeyboardEvent).keyCode === 27;\n    }\n    if (isEscape) {\n      close();\n      return;\n    }\n\n    if (evt.key === 'Tab') {\n      // trap focus\n      const nodes = modal.querySelectorAll('*');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const tabbable = Array.from(nodes).filter((n: any) => n.tabIndex >= 0);\n\n      let index = -1;\n      if (document.activeElement) {\n        index = tabbable.indexOf(document.activeElement);\n      }\n      if (index === -1 && evt.shiftKey) index = 0;\n\n      index += tabbable.length + (evt.shiftKey ? -1 : 1);\n      index %= tabbable.length;\n\n      (tabbable[index] as HTMLElement).focus && (tabbable[index] as HTMLElement).focus();\n      evt.preventDefault();\n    }\n  }\n\n  const previously_focused = typeof document !== 'undefined' && document.activeElement;\n\n  if (previously_focused) {\n    onDestroy(() => {\n      const htmlElement = previously_focused as HTMLElement;\n      if (htmlElement.focus) {\n        htmlElement.focus();\n      }\n    });\n  }\n</script>\n\n<svelte:window on:keydown={handle_keydown} />\n\n<!-- container -->\n<div class=\"z-50 fixed w-full h-full top-0 left-0 flex items-center justify-center text-black dark:text-white\">\n  <!-- clickable dark overlay -->\n  <div on:click={close} class=\"absolute w-full h-full bg-gray-900 opacity-80\" />\n\n  <!--modal-->\n  <div\n    class=\"absolute border-2 w-11/12 md:max-w-md mx-auto overflow-y-auto max-h-screen dark:bg-black dark:border-2 dark:border-gray-800 bg-white\"\n  >\n    {#if globalCloseButton}\n      <div\n        on:click={close}\n        class=\"modal-close absolute top-0 right-0 cursor-pointer flex flex-col items-center mt-4 mr-4 text-sm\"\n      >\n        <svg\n          class=\"fill-current text-white\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"18\"\n          height=\"18\"\n          viewBox=\"0 0 18 18\"\n        >\n          <path\n            d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"\n          />\n        </svg>\n        <span class=\"text-sm\">(Esc)</span>\n      </div>\n    {/if}\n\n    <!-- Add margin if you want to see some of the overlay behind the modal-->\n    <div class=\"modal-content py-4 text-left px-6\" bind:this={modal}>\n      <div class=\"flex justify-between items-center\">\n        <!--Title-->\n        {#if title}\n          <p class=\"text-2xl font-bold\">{title}</p>\n        {/if}\n        {#if closeButton}\n          <div on:click={close} class=\"modal-close cursor-pointer z-50\">\n            <svg\n              class=\"fill-current text-black\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 18 18\"\n            >\n              <path\n                d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"\n              />\n            </svg>\n          </div>\n        {/if}\n      </div>\n\n      <!--Body-->\n      <slot />\n\n      <!--Footer-->\n      <div class=\"flex justify-end pt-2\">\n        <slot name=\"footer\" />\n      </div>\n    </div>\n  </div>\n</div>\n","import _contractsInfos from '$lib/contracts.json';\nimport {readable} from 'svelte/store';\n\nexport const initialContractsInfos = _contractsInfos;\n\nlet _set;\nexport const contractsInfos = readable(_contractsInfos, (set) => {\n  _set = set;\n});\n\nif (import.meta.hot) {\n  import.meta.hot.accept((newModule) => {\n    _set(newModule.initialContractsInfos);\n  });\n}\n","import {blockTime} from '$lib/config';\nimport {readable} from 'svelte/store';\n\nconst performanceAvailable = typeof performance !== 'undefined'; // server\n\nexport let startTime = performanceAvailable ? (Date.now() - performance.now()) / 1000 : Date.now() / 1000;\n\nexport function now(): number {\n  if (performanceAvailable) {\n    return Math.floor(performance.now() / 1000) + startTime;\n  } else {\n    return Math.floor(Date.now() / 1000) + startTime;\n  }\n}\n\nlet _corrected = false;\nexport function correctTime(actualTime: number): void {\n  const currentTime = now();\n  const diff = actualTime - currentTime;\n  if (Math.abs(diff) > blockTime) {\n    // only adapt if difference is significant\n    startTime += diff;\n  }\n  _corrected = true;\n}\n\nexport function isCorrected(): boolean {\n  return _corrected;\n}\n\nexport const time = readable(now(), function start(set) {\n  const interval = setInterval(() => {\n    set(now());\n  }, 1000);\n\n  return function stop() {\n    clearInterval(interval);\n  };\n});\n\nif (typeof window !== 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as unknown as any).time = {\n    now,\n    startTime,\n    correctTime,\n    isCorrected,\n    time,\n  };\n}\n","import {blockTime} from '$lib/config';\nimport type {Provider} from '@ethersproject/abstract-provider';\nimport {logs} from 'named-logs';\nimport type {Readable} from 'svelte/store';\nconst console = logs('chainTempo');\n\nfunction removeFrom(array: unknown[], elem: unknown): void {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (array[i] === elem) {\n      array.splice(i, 1);\n      return;\n    }\n  }\n  console.log('NOT FOUND');\n}\n\nexport type ChainTempoInfo = {lastBlockNumber?: number; stale: boolean};\n\nexport type TempoListener = (chainInfo: ChainTempoInfo) => void;\n\nclass ChainTempo implements Readable<ChainTempoInfo> {\n  private blockListeners: TempoListener[] = [];\n  private currentProvider?: Provider = undefined;\n  private callback: () => void;\n  private timeout: NodeJS.Timeout;\n  private lastUpdate = 0;\n  private triggerTimeout: NodeJS.Timeout;\n  public readonly chainInfo: ChainTempoInfo = {lastBlockNumber: undefined, stale: true};\n\n  constructor(private maxTimeout: number) {}\n\n  subscribe(func: TempoListener): () => void {\n    func(this.chainInfo);\n    this.blockListeners.push(func);\n    return removeFrom.bind(null, this.blockListeners, func);\n  }\n\n  check() {\n    const now = Date.now() / 1000;\n    if (now - this.lastUpdate > this.maxTimeout - 1) {\n      console.info(`timed out... ${now}  - ${this.lastUpdate} = ${now - this.lastUpdate} > ${this.maxTimeout - 1}`);\n      this.onBlock(undefined);\n    }\n    this.timeout = setTimeout(this.check.bind(this), this.maxTimeout * 1000);\n  }\n\n  startOrUpdateProvider(provider?: Provider) {\n    if (this.currentProvider !== provider) {\n      if (this.currentProvider) {\n        console.info('stop listening for block event');\n        this.currentProvider.off('block', this.callback);\n      }\n      this.callback = this.onBlock.bind(this);\n      this.currentProvider = provider;\n      if (this.currentProvider) {\n        console.info('listening for block event');\n        this.currentProvider.on('block', this.callback);\n      }\n    }\n\n    // fallback on time as provider might not be available\n    if (!this.timeout) {\n      this.timeout = setTimeout(this.check.bind(this), this.maxTimeout * 1000);\n    }\n  }\n  private onBlock(blockNumber?: number) {\n    if (blockNumber) {\n      this.chainInfo.lastBlockNumber = blockNumber;\n      this.chainInfo.stale = false;\n    } else {\n      this.chainInfo.stale = true;\n    }\n    this.lastUpdate = Date.now() / 1000;\n    this.triggerListeners();\n  }\n\n  private triggerListeners() {\n    if (this.triggerTimeout) {\n      clearTimeout(this.triggerTimeout);\n    }\n    this.triggerTimeout = setTimeout(this.callListeners.bind(this), 0);\n  }\n\n  private callListeners() {\n    console.info(`onBlock ${this.chainInfo.lastBlockNumber}`);\n\n    for (const listener of this.blockListeners) {\n      // TODO delay them ?\n      listener(this.chainInfo); // TODO wait for each one ?\n    }\n    // TODO wait for them (if delayed) before triggering the next update?\n  }\n}\n\nexport const chainTempo = new ChainTempo(blockTime * 6);\n","import {initWeb3W} from 'web3w';\nimport {WalletConnectModuleLoader} from 'web3w-walletconnect-loader';\nimport {contractsInfos} from '$lib/blockchain/contracts';\nimport {notifications} from '../web/notifications';\nimport {webWalletURL, finality, fallbackProviderOrUrl, chainId, localDev} from '$lib/config';\nimport {isCorrected, correctTime} from '$lib/time';\nimport {base} from '$app/paths';\nimport {chainTempo} from '$lib/blockchain/chainTempo';\nimport * as Sentry from '@sentry/browser';\nimport {get} from 'svelte/store';\n\nconst walletStores = initWeb3W({\n  chainConfigs: get(contractsInfos),\n  builtin: {autoProbe: true},\n  transactions: {\n    autoDelete: false,\n    finality,\n  },\n  flow: {\n    autoUnlock: true,\n  },\n  autoSelectPrevious: true,\n  localStoragePrefix: (base && base.startsWith('/ipfs/')) || base.startsWith('/ipns/') ? base.slice(6) : undefined, // ensure local storage is not conflicting across web3w-based apps on ipfs gateways\n  options: [\n    'builtin',\n    new WalletConnectModuleLoader({\n      nodeUrl: typeof fallbackProviderOrUrl === 'string' ? fallbackProviderOrUrl : undefined,\n      chainId,\n      infuraId: 'bc0bdd4eaac640278cdebc3aa91fabe4',\n    }),\n  ],\n  fallbackNode: fallbackProviderOrUrl,\n  checkGenesis: localDev,\n});\n\nexport const {wallet, transactions, builtin, chain, balance, flow, fallback} = walletStores;\n\nfunction notifyFailure(tx: {hash: string}) {\n  notifications.queue({\n    id: tx.hash,\n    delay: 0,\n    title: 'Transaction Error',\n    text: 'The Transaction failed',\n    type: 'error',\n    onAcknowledge: () => transactions.acknowledge(tx.hash, 'failure'),\n  });\n}\n\nfunction notifyCancelled(tx: {hash: string}) {\n  notifications.queue({\n    id: tx.hash,\n    delay: 3,\n    title: 'Transaction Cancelled',\n    text: 'The Transaction Has Been Replaced',\n    type: 'info',\n    onAcknowledge: () => transactions.acknowledge(tx.hash, 'cancelled'),\n  });\n}\n\ntransactions.subscribe(($transactions) => {\n  for (const tx of $transactions.concat()) {\n    if (tx.confirmations > 0 && !tx.acknowledged) {\n      if (tx.status === 'failure') {\n        notifyFailure(tx);\n      } else if (tx.status === 'cancelled') {\n        notifyCancelled(tx);\n      } else {\n        // auto acknowledge\n        transactions.acknowledge(tx.hash, tx.status);\n      }\n    }\n  }\n});\n\nchain.subscribe(async (v) => {\n  chainTempo.startOrUpdateProvider(wallet.provider);\n  if (!isCorrected()) {\n    if (v.state === 'Connected' || v.state === 'Ready') {\n      const latestBlock = await wallet.provider?.getBlock('latest');\n      if (latestBlock) {\n        correctTime(latestBlock.timestamp);\n      }\n    }\n  }\n});\n\nfallback.subscribe(async (v) => {\n  if (!isCorrected()) {\n    if (v.state === 'Connected' || v.state === 'Ready') {\n      const latestBlock = await wallet.provider?.getBlock('latest');\n      if (latestBlock) {\n        correctTime(latestBlock.timestamp);\n      }\n    }\n  }\n});\n\nlet lastAddress: string | undefined;\nwallet.subscribe(async ($wallet) => {\n  if (lastAddress !== $wallet.address) {\n    lastAddress = $wallet.address;\n    Sentry.setUser({address: $wallet.address});\n  }\n});\n\n// TODO remove\nif (typeof window !== 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).walletStores = walletStores;\n}\n\nchainTempo.startOrUpdateProvider(wallet.provider);\n\ncontractsInfos.subscribe(async ($contractsInfo) => {\n  await chain.updateContracts($contractsInfo);\n});\n","<script lang=\"ts\">\n  export let title = '';\n  import {chainId, chainName, fallbackProviderOrUrl, webWalletURL} from '$lib/config';\n  import NavButton from '$lib/components/styled/navigation/NavButton.svelte';\n  import Modal from '$lib/components/styled/Modal.svelte';\n  import {base} from '$app/paths';\n  import {wallet, builtin, chain, flow, fallback} from '$lib/blockchain/wallet';\n\n  $: executionError = $flow.executionError as any;\n\n  let options: {img: string; id: string; name: string}[] = [];\n  $: builtinNeedInstalation = $wallet.options.filter((v) => v === 'builtin' && !$builtin.available).length > 0;\n  $: options = $wallet.options\n    .filter((v) => v !== 'builtin' || $builtin.available)\n    .map((v) => {\n      return {\n        img: ((v) => {\n          if (v === 'builtin') {\n            if ($builtin.state === 'Ready') {\n              if ($builtin.vendor === 'Metamask') {\n                return 'images/metamask.svg';\n              } else if ($builtin.vendor === 'Opera') {\n                return 'images/opera.svg';\n              }\n            }\n            return 'images/web3-default.png';\n          } else {\n            if (v.startsWith('torus-')) {\n              const verifier = v.slice(6);\n              return `images/torus/${verifier}.svg`;\n            }\n            return `images/${v}.svg`;\n          }\n        })(v),\n        id: v,\n        name: v,\n      };\n    });\n\n  function acknowledgeNewGenesis() {\n    chain.acknowledgeNewGenesisHash();\n  }\n\n  async function switchChain() {\n    let blockExplorerUrls: string[] | undefined;\n    const explorerTXURL = import.meta.env.VITE_BLOCK_EXPLORER_TRANSACTION as string;\n    if (explorerTXURL) {\n      blockExplorerUrls.push(explorerTXURL.slice(0, explorerTXURL.length - 2));\n    }\n    const rpcUrls = [];\n    if (webWalletURL) {\n      rpcUrls.push(webWalletURL);\n    }\n    if (fallbackProviderOrUrl) {\n      rpcUrls.push(fallbackProviderOrUrl);\n    }\n    await chain.switchChain(chainId, {chainName, rpcUrls, blockExplorerUrls});\n  }\n</script>\n\n<slot />\n\n{#if $chain.state === 'Idle' && !$chain.connecting && $fallback.state === 'Idle' && !$fallback.connecting}\n  <!-- Not Used Here: No need of node connection -->\n  <!-- <div\n    class=\"w-full flex items-center justify-center fixed top-0 pointer-events-none\"\n    style=\"z-index: 5;\">\n    <p\n      class=\"w-64 text-center rounded-bl-xl rounded-br-xl text-gray-200 bg-pink-600 p-1\">\n      Please Connect.\n    </p>\n  </div> -->\n{:else if $chain.state === 'Idle' && !$chain.connecting && $fallback.error}\n  <!-- Not Used Here: No need of node connection, we should check thegraph connection instead -->\n  <!-- <div\n    class=\"w-full flex items-center justify-center fixed top-0 pointer-events-none\"\n    style=\"z-index: 5;\">\n    <p\n      class=\"w-64 text-center rounded-bl-xl rounded-br-xl text-gray-200 bg-pink-600 p-1\">\n      Network Issues, Please Connect.\n    </p>\n  </div> -->\n{:else if $chain.notSupported}\n  <div class=\"w-full flex items-center justify-center fixed top-0\" style=\"z-index: 5;\">\n    <p class=\"w-64 text-center rounded-bl-xl rounded-br-xl text-gray-200 bg-pink-600 p-1\">\n      Wrong network, switch to\n      {chainName}\n      <button class=\"border-2 border-white p-2\" on:click={switchChain}>OK</button>\n    </p>\n  </div>\n{:else if $chain.genesisChanged}\n  <div class=\"w-full flex items-center justify-center fixed top-0\" style=\"z-index: 5;\">\n    <p class=\"w-64 text-center rounded-bl-xl rounded-br-xl text-gray-200 bg-red-500 p-1\">\n      chain reset detected! Metamask need to have its account reset! <button\n        class=\"border-2 border-white p-2\"\n        on:click={acknowledgeNewGenesis}>OK</button\n      >\n    </p>\n  </div>\n{/if}\n\n{#if $wallet.error}\n  <Modal title=\"An Error Happened\" on:close={() => wallet.acknowledgeError()}>\n    <p class=\"w-64 text-center text-red-500 p-1\">\n      {$wallet.error.message}\n    </p>\n  </Modal>\n{:else if $chain.error}\n  <Modal title=\"An Error Happened\" on:close={() => chain.acknowledgeError()}>\n    <p class=\"w-64 text-center text-red-500 p-1\">\n      {$chain.error.message}\n    </p>\n  </Modal>\n{:else if $flow.inProgress}\n  <Modal {title} cancelable={!$wallet.connecting} on:close={() => flow.cancel()} closeButton={false}>\n    {#if $wallet.state === 'Idle'}\n      {#if $wallet.loadingModule}\n        Loading module:\n        {$wallet.selected}\n      {:else if $wallet.connecting}\n        Connecting to wallet...\n      {:else}\n        <div class=\"text-center\">\n          <p>You need to connect your wallet.</p>\n        </div>\n        <div class=\"flex flex-wrap justify-center pb-3\">\n          {#each options as option}\n            <img\n              class=\"cursor-pointer p-2 m-2 border-2 h-12 w-12 object-contain\"\n              alt={`Login with ${option.name}`}\n              src={`${base}/${option.img}`}\n              on:click={() => wallet.connect(option.id)}\n            />\n          {/each}\n        </div>\n        {#if builtinNeedInstalation}\n          <div class=\"text-center\">OR</div>\n          <div class=\"flex justify-center\">\n            <NavButton\n              label=\"Download Metamask\"\n              blank={true}\n              href=\"https://metamask.io/download.html\"\n              class=\"m-4 w-max-content\"\n            >\n              <img\n                class=\"cursor-pointer p-0 mx-2 h-10 w-10 object-contain\"\n                alt={`Download Metamask}`}\n                src={`${base}/images/metamask.svg`}\n              />\n              Download metamask\n            </NavButton>\n          </div>\n        {/if}\n      {/if}\n    {:else if $wallet.state === 'Locked'}\n      {#if $wallet.unlocking}\n        Please accept the application to access your wallet.\n      {:else}\n        <NavButton label=\"Unlock Wallet\" on:click={() => wallet.unlock()}>Unlock</NavButton>\n      {/if}\n    {:else if $chain.state === 'Idle'}\n      {#if $chain.connecting}\n        Connecting...\n      {:else if $chain.error}\n        <div class=\"text-center\">\n          <p>{$chain.error?.message || '' + $chain.error}</p>\n          <NavButton class=\"mt-4\" label=\"OK\" on:click={() => flow.cancel()}>OK</NavButton>\n        </div>\n      {/if}\n    {:else if $chain.state === 'Connected'}\n      {#if $chain.loadingData}\n        Loading contracts...\n      {:else if $chain.notSupported}\n        Please switch to\n        {chainName}\n        <!-- ({$chain.chainId}) -->\n        <NavButton label=\"Unlock Wallet\" on:click={switchChain}>Switch</NavButton>\n      {/if}\n    {:else if executionError}\n      <div class=\"text-center\">\n        <p>\n          {#if executionError.code === 4001}\n            You rejected the request\n          {:else if executionError.message}{executionError.message}{:else}Error: {executionError}{/if}\n        </p>\n        <NavButton class=\"mt-4\" label=\"Retry\" on:click={() => flow.retry()}>Retry</NavButton>\n      </div>\n    {:else if $wallet.pendingUserConfirmation}\n      {#if $wallet.pendingUserConfirmation[0] === 'transaction'}\n        Please accept transaction...\n      {:else if $wallet.pendingUserConfirmation[0] === 'signature'}\n        Please accept signature...\n      {:else}Please accept request...{/if}\n    {:else if $wallet.state === 'Ready'}\n      Please wait...\n    {:else}\n      <div class=\"text-center\">\n        <p>Flow aborted {$wallet.state}</p>\n        <NavButton class=\"mt-4\" label=\"Cancel\" on:click={() => flow.cancel()}>OK</NavButton>\n      </div>\n    {/if}\n  </Modal>\n{/if}\n","export const initialState: {\n  fetching: boolean;\n  stale: boolean;\n  error: unknown;\n  data?: Record<string, unknown>;\n  extensions?: Record<string, unknown>;\n} = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n};\n","import {Client, defaultExchanges} from '@urql/core';\nimport type {OperationContext, OperationResult} from '@urql/core';\nimport {devtoolsExchange} from '@urql/devtools';\nimport type {DocumentNode} from 'graphql';\nimport {pipe, fromValue, concat, scan, map, subscribe} from 'wonka';\nimport {initialState} from './constants';\nimport type {sourceT} from 'wonka/dist/types/src/Wonka_types.gen';\n\nexport type InternalQueryState<T> = {\n  fetching: boolean;\n  stale: boolean;\n  data: T;\n  error: unknown;\n  extensions: Record<string, unknown>;\n};\n\nconst exchanges = defaultExchanges.concat();\n\nif (import.meta.env.MODE === 'development') {\n  exchanges.unshift(devtoolsExchange);\n}\n\nexport class EndPoint {\n  private client: Client;\n  constructor(url: string) {\n    if (!url) {\n      console.error(`need an url for graphql queries`);\n    } else {\n      this.client = new Client({\n        url,\n        exchanges,\n      });\n    }\n  }\n\n  mutate<Data = unknown, Variables extends Record<string, unknown> = Record<string, unknown>>(\n    query: DocumentNode | string,\n    args?: {\n      variables?: Variables;\n      context?: Partial<OperationContext>;\n    }\n  ): Promise<OperationResult<Data>> {\n    return this.client.mutation(query, args?.variables, args?.context).toPromise();\n  }\n\n  query<Data, Variables extends Record<string, unknown> = Record<string, unknown>>(\n    query: DocumentNode | string,\n    args?: {\n      variables?: Variables;\n      context?: Partial<OperationContext>;\n      // TODO path?: string\n    }\n  ): Promise<OperationResult<Data, Variables>> {\n    return this.client.query(query, args?.variables, args?.context).toPromise();\n  }\n\n  async queryList<T, Variables extends Record<string, unknown> = Record<string, unknown>>(\n    query: DocumentNode | string,\n    args?: {\n      variables?: Variables;\n      context?: Partial<OperationContext>;\n      path?: string;\n      getLastId?: (entries: T[]) => string;\n    }\n  ): Promise<T[]> {\n    const fields = args.path.split('.');\n    const first = 100;\n    let lastId = '0x0';\n    let numEntries = first;\n    let entries: T[] = [];\n    while (numEntries === first) {\n      const result = await this.client.query(query, {first, lastId, ...args?.variables}, args?.context).toPromise();\n      if (result.error) {\n        throw new Error(result.error.message);\n      }\n      const data = result.data;\n\n      // TODO deep access on root array\n      let newEntries = [];\n      if (data && args.path) {\n        let tmp = data;\n        for (const fieldPart of fields) {\n          tmp = tmp[fieldPart];\n        }\n        newEntries = tmp;\n      }\n\n      numEntries = newEntries.length;\n      if (numEntries > 0) {\n        const newLastId = args?.getLastId !== undefined ? args?.getLastId(entries) : newEntries[numEntries - 1].id;\n        if (lastId === newLastId) {\n          console.log('same query, stop');\n          break;\n        }\n        lastId = newLastId;\n      }\n      entries = entries.concat(newEntries);\n    }\n    return entries;\n  }\n\n  subscribeToQuery<\n    Data extends Record<string, unknown>,\n    Variables extends Record<string, unknown> = Record<string, unknown>\n  >(\n    query: DocumentNode | string,\n    args?: {\n      variables?: Variables;\n      context?: Partial<OperationContext>;\n    }\n  ): {\n    subscribe: (value: (value: InternalQueryState<Data>) => void) => () => void;\n  } {\n    const queryResult$ = pipe(\n      concat([\n        fromValue({fetching: true, stale: false}),\n        pipe(\n          this.client.query(query, args?.variables, args?.context),\n          map(({stale, data, error, extensions}) => ({\n            fetching: false,\n            stale: !!stale,\n            data,\n            error,\n            extensions,\n          }))\n        ),\n        fromValue({fetching: false, stale: false}),\n      ]),\n      scan(\n        (result, partial) => ({\n          ...result,\n          ...partial,\n        }),\n        initialState\n      )\n    );\n\n    return {\n      subscribe(onValue) {\n        return pipe(queryResult$ as sourceT<InternalQueryState<Data>>, subscribe(onValue)).unsubscribe;\n      },\n    };\n  }\n}\n","import {EndPoint} from '$lib/utils/graphql/endpoint';\nimport {graphNodeURL} from '$lib/config';\n\nexport const SUBGRAPH_ENDPOINT = new EndPoint(graphNodeURL);\n","import {writable} from 'svelte/store';\nimport type {Readable, Writable} from 'svelte/store';\n\ntype DataType<T> = Record<string, unknown> & {data?: T};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction _recurseSet(target: any, obj: any) {\n  for (const key of Object.keys(obj)) {\n    if (target[key] && typeof target[key] === 'object' && typeof obj[key] === 'object') {\n      _recurseSet(target[key], obj[key]);\n    } else {\n      target[key] = obj[key];\n    }\n  }\n}\n\nexport class BasicObjectStore<T extends Record<string, number | string>> implements Readable<T> {\n  protected store: Writable<T>;\n  protected __set: (newValue: T) => void;\n  private value: T;\n  private oldValue: T;\n  constructor(initialValue?: T) {\n    this.value = initialValue;\n    this.oldValue = {...initialValue};\n    this.store = writable(this.value, this._start.bind(this));\n  }\n\n  public get $store(): T {\n    return this.value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _start(_: (newValue: T) => void): void {\n    return this._stop.bind(this);\n  }\n\n  protected _stop(): void {}\n\n  protected _set(newValue: T): void {\n    let changes = false;\n    if (!this.value) {\n      this.value = {...newValue};\n      changes = true;\n    } else {\n      for (const key of Object.keys(this.oldValue)) {\n        if (newValue[key] !== this.oldValue[key]) {\n          changes = true;\n          (this.value as Record<string, unknown>)[key] = newValue[key];\n        }\n      }\n      for (const key of Object.keys(newValue)) {\n        if (newValue[key] !== this.oldValue[key]) {\n          changes = true;\n          (this.value as Record<string, unknown>)[key] = newValue[key];\n        }\n      }\n    }\n\n    if (changes) {\n      this.oldValue = {...this.value};\n      this.store.set(this.value);\n    }\n  }\n\n  subscribe(run: (value: T) => void, invalidate?: (value?: T) => void): () => void {\n    return this.store.subscribe(run, invalidate);\n  }\n}\n\nexport class BaseStore<T extends Record<string, unknown>> implements Readable<T> {\n  protected store: Writable<T>;\n  constructor(protected readonly $store: T) {\n    this.store = writable(this.$store);\n  }\n\n  subscribe(run: (value: T) => void, invalidate?: (value?: T) => void): () => void {\n    return this.store.subscribe(run, invalidate);\n  }\n\n  protected setPartial(obj: Partial<T>): T {\n    if (!this.$store) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.$store as any) = {};\n    }\n    for (const key of Object.keys(obj)) {\n      (this.$store as Record<string, unknown>)[key] = obj[key];\n    }\n    this.store.set(this.$store);\n    return this.$store;\n  }\n  protected set(obj: T): T {\n    if (!this.$store) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.$store as any) = {};\n    }\n\n    if (!obj) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.$store as any) = obj;\n    }\n    // Testing hmr for subclasses\n    //   const objAny: any = obj;\n    //   objAny.value += 7;\n    if (obj !== this.$store) {\n      for (const key of Object.keys(this.$store)) {\n        if (obj[key] === undefined) {\n          (this.$store as Record<string, unknown>)[key] = undefined;\n        }\n      }\n      for (const key of Object.keys(obj)) {\n        (this.$store as Record<string, unknown>)[key] = obj[key];\n      }\n    }\n    this.store.set(this.$store);\n    return this.$store;\n  }\n}\n\nexport class BaseStoreWithData<T extends DataType<U>, U> extends BaseStore<T> {\n  constructor($store: T) {\n    super($store);\n  }\n\n  protected setData(data: Partial<U>, extra?: Partial<T>): T {\n    this.$store.data = this.$store.data || ({} as U); // this assume setData was set before ?\n    _recurseSet(this.$store.data, data);\n    if (extra) {\n      this.setPartial(extra);\n    }\n    this.store.set(this.$store);\n    return this.$store;\n  }\n}\n\nexport abstract class AutoStartBaseStore<T extends Record<string, unknown>> extends BaseStore<T> {\n  private _listenerCount = 0;\n  private _stopUpdates?: () => void;\n  subscribe(run: (value: T) => void, invalidate?: (value?: T) => void): () => void {\n    this._listenerCount++;\n    if (this._listenerCount === 1) {\n      console.info(`starting...`);\n      this._stopUpdates = this._onStart();\n    }\n    const unsubscribe = this.store.subscribe(run, invalidate);\n    return () => {\n      this._listenerCount--;\n      if (this._listenerCount === 0) {\n        console.info(`stopping`);\n        if (this._stopUpdates) {\n          this._stopUpdates();\n          this._stopUpdates = undefined;\n        }\n      }\n      unsubscribe();\n    };\n  }\n\n  abstract _onStart(): (() => void) | undefined;\n}\n","import type {EndPoint} from '../graphql/endpoint';\nimport type {Readable} from 'svelte/store';\nimport {BaseStoreWithData} from './base';\nimport {logs} from 'named-logs';\nconst console = logs('graphql');\n\ntype ChainTempoInfo = {lastBlockNumber?: number; stale: boolean};\n\nexport type Hook = {subscribe: (f: (chainInfo: ChainTempoInfo) => void) => () => void};\n\nexport type QueryState<T> = {\n  step: 'IDLE' | 'LOADING' | 'READY';\n  data?: T;\n  error?: string;\n};\n\nexport type ListOptions =\n  | {\n      path?: string;\n      getLastId?: (entries: unknown[]) => string;\n    }\n  | boolean;\n\nexport type QueryStore<T> = Readable<QueryState<T>> & {\n  acknowledgeError: () => void;\n};\n\nexport type QueryStoreWithFetch<T> = QueryStore<T> & {\n  fetch(extraVariables?: Record<string, unknown>): Promise<void>;\n};\n\nexport type QueryStoreWithRuntimeVariables<T> = QueryStoreWithFetch<T> & {\n  runtimeVariables: Record<string, string>;\n};\n\nclass BaseQueryStore<T, V extends Record<string, unknown> = Record<string, unknown>>\n  extends BaseStoreWithData<QueryState<T>, T>\n  implements QueryStoreWithRuntimeVariables<T>\n{\n  public runtimeVariables: Record<string, string> = {};\n  public constructor(\n    private endpoint: EndPoint,\n    private query: string,\n    private options?: {\n      variables?: V;\n      path?: string;\n      list?: ListOptions;\n    }\n  ) {\n    super({\n      step: 'IDLE',\n    });\n  }\n\n  acknowledgeError(): void {\n    this.setPartial({error: undefined});\n  }\n\n  async fetch(extraVariables?: Record<string, unknown>): Promise<void> {\n    console.info('fetching....');\n    const first =\n      typeof this.options?.variables?.first === 'number' ? (this.options?.variables?.first as number) : 1000;\n    let numEntries = first;\n    let lastId = '0x0';\n    let data: T;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let list: any[];\n    while (numEntries === first) {\n      try {\n        const variables = {first, lastId, ...this.options?.variables, ...this.runtimeVariables, ...extraVariables};\n        const querySplitted = this.query.split('?');\n        let query = '';\n        for (let i = 0; i < querySplitted.length; i++) {\n          const split = querySplitted[i];\n          if (split.startsWith('$')) {\n            if (!variables[split.substr(1)]) {\n              i++; // skip\n            }\n          } else {\n            query += split;\n          }\n        }\n        const result = await this.endpoint.query<Record<string, unknown>, V>(query, {\n          variables,\n          context: {\n            requestPolicy: 'cache-and-network', // required as cache-first will not try to get new data\n          },\n        });\n\n        if (!result.data) {\n          this.setPartial({error: `cannot fetch from thegraph node`});\n          throw new Error(`cannot fetch from thegraph node`);\n        }\n\n        const freshData = (this.options?.path ? result.data[this.options.path] : result.data) as T;\n        if (!data) {\n          data = freshData;\n        }\n\n        if (this.options?.list) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          let freshList = freshData as unknown as any[];\n          if (typeof this.options.list !== 'boolean' && this.options.list.path) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            freshList = freshData[this.options.list.path] as any[];\n          }\n\n          numEntries = freshList.length;\n          if (numEntries > 0) {\n            const newLastId =\n              typeof this.options.list !== 'boolean' && this.options.list.getLastId !== undefined\n                ? this.options.list.getLastId(freshList)\n                : freshList[numEntries - 1].id;\n            if (lastId === newLastId) {\n              console.log('same query, stop');\n              break;\n            }\n            lastId = newLastId;\n          }\n\n          if (!list) {\n            list = freshList;\n          } else {\n            list.push(...freshList);\n          }\n        } else {\n          numEntries = 0; // stop the loop\n        }\n      } catch (e) {\n        numEntries = 0;\n        console.error(e);\n      }\n    }\n    this.setPartial({data, step: 'READY'});\n  }\n}\n\nexport class TimedQueryStore<T, V extends Record<string, unknown> = Record<string, unknown>>\n  extends BaseQueryStore<T, V>\n  implements QueryStore<T>\n{\n  private timeout: NodeJS.Timeout;\n  private extraOptions: {frequency?: number};\n  public constructor(\n    endpoint: EndPoint,\n    query: string,\n    options?: {\n      variables?: V;\n      path?: string;\n      frequency?: number;\n    }\n  ) {\n    super(endpoint, query, options);\n    this.extraOptions = options;\n  }\n\n  acknowledgeError(): void {\n    this.setPartial({error: undefined});\n  }\n\n  async fetch(): Promise<void> {\n    await super.fetch();\n    this.timeout = setTimeout(this.fetch.bind(this), (this.extraOptions?.frequency || 1) * 1000);\n  }\n\n  start(): QueryStore<T> {\n    if (this.$store.step === 'IDLE') {\n      this.setPartial({step: 'LOADING'});\n    }\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.fetch();\n    return this;\n  }\n\n  stop(): void {\n    this.setPartial({step: 'IDLE'});\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  }\n}\n\nexport class HookedQueryStore<T, V extends Record<string, unknown> = Record<string, unknown>>\n  extends BaseQueryStore<T, V>\n  implements QueryStore<T>\n{\n  private hook: Hook;\n  public constructor(\n    endpoint: EndPoint,\n    query: string,\n    hook: Hook,\n    options?: {\n      variables?: V;\n      path?: string;\n      list?: ListOptions;\n    }\n  ) {\n    super(endpoint, query, options);\n    this.hook = hook;\n  }\n\n  acknowledgeError(): void {\n    this.setPartial({error: undefined});\n  }\n\n  private listenerCount = 0;\n  private stopUpdates?: () => void;\n  subscribe(run: (value: QueryState<T>) => void, invalidate?: (value?: QueryState<T>) => void): () => void {\n    this.listenerCount++;\n    if (this.listenerCount === 1) {\n      console.info(`start fetching`);\n      this.stopUpdates = this.hook.subscribe((chainInfo: ChainTempoInfo) =>\n        this.fetch({blockNumber: chainInfo.lastBlockNumber})\n      );\n    }\n    const unsubscribe = this.store.subscribe(run, invalidate);\n    return () => {\n      this.listenerCount--;\n      if (this.listenerCount === 0) {\n        console.info(`stop fetching`);\n        if (this.stopUpdates) {\n          this.stopUpdates();\n          this.stopUpdates = undefined;\n        }\n      }\n      unsubscribe();\n    };\n  }\n}\n"],"names":["console","get","chainId","defaultExchanges","Client","concat","fromValue","map","scan","subscribe"],"mappings":"mrCAoF8B,0OAAA,6cAfxB,SAIE,OAOE,cAIF,gCAdU,wFAuBuB,4DAAA,2EAA/B,iCAA+B,mnBAG/B,SACE,OAOE,yBARW,0FA5BhB,cAwBI,cAGA,glCAnCb,SAEE,cAGA,6BAwBE,OACE,yEA0BA,yDA3DqB,kBAKV,uBAMR,4DAwBI,4DAGA,qYA7FA,oBAAoB,OACpB,cAAc,OACd,QAAQ,OACR,aAAa,WAElB,GAAW,KACX,MAAc,GAAc,EAAS,YAEvC,cAEoB,GACtB,EAAM,GAAQ,OAAO,SACjB,GAAW,MACX,OAAS,GACX,EAAW,EAAI,MAAQ,UAAY,EAAI,MAAQ,MAE/C,EAAY,EAAsB,UAAY,GAE5C,GACF,cAIE,EAAI,MAAQ,YAER,GAAQ,EAAM,iBAAiB,KAE/B,EAAW,MAAM,KAAK,GAAO,OAAQ,GAAW,EAAE,UAAY,MAEhE,MACA,SAAS,eACX,GAAQ,EAAS,QAAQ,SAAS,gBAEhC,QAAgB,EAAI,UAAU,GAAQ,GAE1C,GAAS,EAAS,OAAU,GAAI,YAAgB,GAChD,GAAS,EAAS,OAEjB,EAAS,GAAuB,OAAU,EAAS,GAAuB,QAC3E,EAAI,uBAIF,SAA4B,WAAa,aAAe,SAAS,cAEnE,GACF,aACQ,GAAc,EAChB,EAAY,OACd,EAAY,oDAsC0C,wxVCnFjD,IAAiB,GAAS,GAAiB,AAAC,GAAQ,ICH3D,GAAuB,MAAO,cAAgB,eAEzC,IAAY,SAA6B,MAAQ,YAAY,OAAS,IAAO,KAAK,MAAQ,iBAEvE,OACxB,IACK,KAAK,MAAM,YAAY,MAAQ,KAAQ,GAEvC,KAAK,MAAM,KAAK,MAAQ,KAAQ,GAI3C,GAAI,IAAa,eACW,EAA0B,MAC9C,GAAc,KACd,EAAO,EAAa,EACtB,KAAK,IAAI,GAAQ,SAEN,MAEF,gBAGwB,OAC9B,SAGI,IAAO,GAAS,KAAO,SAAe,EAAK,MAChD,GAAW,YAAY,IAAM,GAC7B,OACH,WAEI,WAAgB,eACP,MAIlB,AAAI,MAAO,SAAW,aAEnB,QAA0B,KAAO,CAChC,OACA,aACA,eACA,eACA,UC3CJ,KAAMA,IAAU,GAAK,cAErB,YAAoB,EAAkB,EAAqB,QAChD,GAAI,EAAM,OAAS,EAAG,GAAK,EAAG,OACjC,EAAM,KAAO,EAAM,GACf,OAAO,EAAG,aAIZ,IAAI,aAOd,QAAqD,CASnD,YAAoB,EAAoB,uCARE,wBACL,uBAGhB,iBAEuB,CAAC,gBAAiB,OAAW,MAAO,IAIhF,UAAU,EAAiC,UACpC,KAAK,gBACL,eAAe,KAAK,GAClB,GAAW,KAAK,KAAM,KAAK,eAAgB,GAGpD,OAAQ,MACA,GAAM,KAAK,MAAQ,IACrB,EAAM,KAAK,WAAa,KAAK,WAAa,OACpC,KAAK,gBAAgB,QAAU,KAAK,gBAAgB,EAAM,KAAK,gBAAgB,KAAK,WAAa,UACpG,QAAQ,cAEV,QAAU,WAAW,KAAK,MAAM,KAAK,MAAO,KAAK,WAAa,KAGrE,sBAAsB,EAAqB,CACrC,KAAK,kBAAoB,GACvB,MAAK,qBACC,KAAK,uCACR,gBAAgB,IAAI,QAAS,KAAK,gBAEpC,SAAW,KAAK,QAAQ,KAAK,WAC7B,gBAAkB,EACnB,KAAK,qBACC,KAAK,kCACR,gBAAgB,GAAG,QAAS,KAAK,YAKrC,KAAK,eACH,QAAU,WAAW,KAAK,MAAM,KAAK,MAAO,KAAK,WAAa,MAG/D,QAAQ,EAAsB,CAChC,QACG,UAAU,gBAAkB,OAC5B,UAAU,MAAQ,SAElB,UAAU,MAAQ,QAEpB,WAAa,KAAK,MAAQ,SAC1B,mBAGC,kBAAmB,CACrB,KAAK,6BACM,KAAK,qBAEf,eAAiB,WAAW,KAAK,cAAc,KAAK,MAAO,GAG1D,eAAgB,IACd,KAAK,WAAW,KAAK,UAAU,4BAE5B,KAAY,MAAK,iBAEjB,KAAK,iBAMP,IAAa,GAAI,IAAW,GAAY,GCnF/C,GAAe,GAAU,CAC7B,aAAcC,GAAI,IAClB,QAAS,CAAC,UAAW,IACrB,aAAc,CACZ,WAAY,GACZ,aAEF,KAAM,CACJ,WAAY,IAEd,mBAAoB,GACpB,mBAAqB,GAAQ,EAAK,WAAW,WAAc,EAAK,WAAW,UAAY,EAAK,MAAM,GAAK,OACvG,QAAS,CACP,UACA,GAAI,IAA0B,CAC5B,QAAS,MAAO,KAA0B,SAAW,GAAwB,eAC7EC,GACA,SAAU,sCAGd,aAAc,GACd,aAAc,KAGH,CAAC,SAAQ,gBAAc,WAAS,QAAO,WAAS,QAAM,aAAY,GAE/E,YAAuB,EAAoB,IAC3B,MAAM,CAClB,GAAI,EAAG,KACP,MAAO,EACP,MAAO,oBACP,KAAM,yBACN,KAAM,QACN,cAAe,IAAM,GAAa,YAAY,EAAG,KAAM,aAI3D,YAAyB,EAAoB,IAC7B,MAAM,CAClB,GAAI,EAAG,KACP,MAAO,EACP,MAAO,wBACP,KAAM,oCACN,KAAM,OACN,cAAe,IAAM,GAAa,YAAY,EAAG,KAAM,eAI3D,GAAa,UAAU,AAAC,GAAkB,UAC7B,KAAM,GAAc,SACzB,EAAG,cAAgB,GAAK,CAAC,EAAG,eAC1B,EAAG,SAAW,aACF,GACL,EAAG,SAAW,eACP,MAGH,YAAY,EAAG,KAAM,EAAG,WAM7C,EAAM,UAAU,KAAO,IAAM,aAChB,sBAAsB,EAAO,UACpC,CAAC,MACC,GAAE,QAAU,aAAe,EAAE,QAAU,SAAS,MAC5C,GAAc,KAAM,MAAO,WAAP,cAAiB,SAAS,WAChD,MACU,EAAY,cAMhC,GAAS,UAAU,KAAO,IAAM,UAC1B,CAAC,MACC,GAAE,QAAU,aAAe,EAAE,QAAU,SAAS,MAC5C,GAAc,KAAM,MAAO,WAAP,cAAiB,SAAS,WAChD,MACU,EAAY,cAMhC,GAAI,IACJ,EAAO,UAAU,KAAO,IAAY,CAC9B,KAAgB,EAAQ,aACZ,EAAQ,WACP,CAAC,QAAS,EAAQ,aAKrC,AAAI,MAAO,SAAW,aAEnB,QAAe,aAAe,IAGjC,GAAW,sBAAsB,EAAO,UAExC,GAAe,UAAU,KAAO,IAAmB,MAC3C,GAAM,gBAAgB,kICtB0D,qFAG/C,wGAH+C,+GAG/C,4RAJvC,SACE,cACiE,gCAEnD,iHAXuE;AAAA,aAElF,4BACgE,wGAHkB;AAAA,eAElF,uDACgE,6RAJrE,SACE,4BAGE,gCAAoD,qMA2B5B,KAAQ,uBAAwD,kMAAhE,KAAQ,02BAmFb,KAAQ,gKAAtB,gIAAA,+HADL,SACE,uEAAiB,KAAQ,wMAJM,8BAAA,0GAL5B,MAAQ,wBAAwB,KAAO,iBAElC,KAAQ,wBAAwB,KAAO,+PATxC,MAAe,OAAS,QAEnB,KAAe,8XAJ7B,SACE,iVAVG,MAAO,cAEF,KAAO,qbAXZ,MAAO,aAEF,KAAO,8aARZ,MAAQ,4YAvCR,MAAQ,gBAGH,KAAQ,wWA+EsD,kBAAA,2EANjE,wCAAA,iGAFqD,0CAAA,mGAFH,4CAAA,uGALW,eAAQ,kBAAR,iBAAQ,kDAAA,mDAAtC,KAAe,oFAAf,KAAe,wEAFhB,wCAAA,qGAIiC,qBAAA,4KATzB,eAJhB;AAAA,eAE1B,uCAF0B;AAAA,iBAE1B,+RAJoB,oCAAA,yGAMmC,sBAAA,0EAXlD,UAAO,QAAP,cAAc,UAAW,GAAK,KAAO,gXAD3C,SACE,uEAAI,UAAO,QAAP,cAAc,UAAW,GAAK,KAAO,yMAJvB,6BAAA,kGAKgD,kBAAA,uaAXhD,oEAAA,yIAG8C,sBAAA,gFAhCzD,0BAAL,qCASC,+CAZA,gMAAA,qRADL,SACE,uBAEF,yGACS,uBAAL,+HAAA,OASC,wPAhBqB,uCAAA,+FADzB,KAAQ,6BAFe;AAAA,8BAAA;AAAA,kEAEvB,KAAQ,8SAWgB,MAAO,sBAClB,KAAQ,MAAO,6BAHzB,0EAEqB,MAAO,0CAClB,KAAQ,MAAO,oIAUhB,oIAJc,gGAAA,iLAAzB,yBACA,uPAWK;AAAA,6FAAA;AAAA,8JADS,+CAHV,sIA7BL,MAAQ,QAAU,SAuCb,KAAQ,QAAU,WAMlB,KAAO,QAAU,SASjB,KAAO,QAAU,cASjB,OASA,KAAQ,0BAMR,KAAQ,QAAU,wVAnFzB,KAAO,MAAM,qLADhB,qCACG,KAAO,MAAM,2DANb,KAAQ,MAAM,qLADjB,oCACG,KAAQ,MAAM,iIA1ChB,KAAO,QAAU,SAAW,KAAO,YAAc,KAAU,QAAU,SAAW,KAAU,wBAUrF,KAAO,QAAU,SAAW,KAAO,YAAc,KAAU,mBAU3D,KAAO,0BAQP,KAAO,4FAWZ,MAAQ,QAMH,KAAO,QAMP,KAAM,k1BAhHH,QAAQ,MASf,kBA8BF,EAAM,kDAIF,QAKE,MACF,IACF,EAAQ,KAAK,IAEX,IACF,EAAQ,KAAK,SAET,GAAM,YAAYA,IAAU,aAAW,UAAS,kCA8CP,EAAO,yBAMP,EAAM,wBAuB3B,EAAO,QAAQ,EAAO,UA2BK,EAAO,eAQH,GAAK,eAmBJ,GAAK,cAaJ,GAAK,eApFF,GAAK,6HA1GlE,EAAiB,EAAM,qCAGvB,EAAyB,EAAQ,QAAQ,OAAQ,GAAM,IAAM,YAAc,EAAS,WAAW,OAAS,wBACxG,EAAU,EAAQ,QAClB,OAAQ,GAAM,IAAM,WAAa,EAAS,WAC1C,IAAK,KAEF,IAAO,QACD,IAAM,cACJ,EAAS,QAAU,YACjB,EAAS,SAAW,iBACf,yBACE,EAAS,SAAW,cACtB,yBAGJ,qCAEH,GAAE,WAAW,0BACE,EAAE,MAAM,mBAGV,UAElB,GACH,GAAI,EACJ,KAAM,kICnCD,IAMT,CACF,SAAU,GACV,MAAO,GACP,MAAO,OACP,KAAM,OACN,WAAY,QCKR,GAAYC,GAAiB,iBAMb,CAEpB,YAAY,EAAa,CAClB,OAGE,OAAS,GAAIC,IAAO,CACvB,MACA,uBAJM,MAAM,mCASlB,OACE,EACA,EAIgC,OACzB,MAAK,OAAO,SAAS,EAAO,iBAAM,UAAW,iBAAM,SAAS,YAGrE,MACE,EACA,EAK2C,OACpC,MAAK,OAAO,MAAM,EAAO,iBAAM,UAAW,iBAAM,SAAS,iBAG5D,WACJ,EACA,EAMc,MACR,GAAS,EAAK,KAAK,MAAM,KACzB,EAAQ,OACV,GAAS,MACT,EAAa,EACb,EAAe,QACZ,IAAe,GAAO,MACrB,GAAS,KAAM,MAAK,OAAO,MAAM,EAAO,GAAC,QAAO,UAAW,iBAAM,WAAY,iBAAM,SAAS,eAC9F,EAAO,WACH,IAAI,OAAM,EAAO,MAAM,cAEzB,GAAO,EAAO,QAGhB,GAAa,MACb,GAAQ,EAAK,KAAM,IACjB,GAAM,WACC,KAAa,KAChB,EAAI,KAEC,OAGF,EAAW,OACpB,EAAa,EAAG,MACZ,GAAY,kBAAM,aAAc,OAAY,iBAAM,UAAU,GAAW,EAAW,EAAa,GAAG,MACpG,IAAW,EAAW,SAChB,IAAI,4BAGL,IAED,EAAQ,OAAO,SAEpB,GAGT,iBAIE,EACA,EAMA,MACM,GAAe,GACnBC,GAAO,CACLC,GAAU,CAAC,SAAU,GAAM,MAAO,KAClC,GACE,KAAK,OAAO,MAAM,EAAO,iBAAM,UAAW,iBAAM,SAChDC,GAAI,CAAC,CAAC,QAAO,OAAM,QAAO,kBACxB,SAAU,GACV,MAAO,CAAC,CAAC,EACT,OACA,QACA,iBAGJD,GAAU,CAAC,SAAU,GAAO,MAAO,OAErCE,GACE,CAAC,EAAQ,WACJ,GACA,GAEL,WAIG,CACL,UAAU,EAAS,OACV,IAAK,EAAmDC,GAAU,IAAU,oBCxI9E,IAAoB,GAAI,IAAS,ICG9C,YAAqB,EAAa,EAAU,UAC/B,KAAO,QAAO,KAAK,GACxB,EAAO,IAAQ,MAAO,GAAO,IAAS,UAAY,MAAO,GAAI,IAAS,YAC5D,EAAO,GAAM,EAAI,MAEtB,GAAO,EAAI,WA0DyD,CAE/E,YAA+B,EAAW,oBACnC,MAAQ,GAAS,KAAK,QAG7B,UAAU,EAAyB,EAA8C,OACxE,MAAK,MAAM,UAAU,EAAK,GAGzB,WAAW,EAAoB,CAClC,KAAK,QAEP,MAAK,OAAiB,aAEd,KAAO,QAAO,KAAK,GAC3B,KAAK,OAAmC,GAAO,EAAI,eAEjD,MAAM,IAAI,KAAK,QACb,KAAK,OAEJ,IAAI,EAAW,IAClB,KAAK,QAEP,MAAK,OAAiB,IAGpB,GAEF,MAAK,OAAiB,GAKrB,IAAQ,KAAK,OAAQ,UACZ,KAAO,QAAO,KAAK,KAAK,QAC7B,EAAI,KAAS,QACd,MAAK,OAAmC,GAAO,iBAGzC,KAAO,QAAO,KAAK,GAC3B,KAAK,OAAmC,GAAO,EAAI,eAGnD,MAAM,IAAI,KAAK,QACb,KAAK,wBAIiD,GAAa,CAC5E,YAAY,EAAW,OACf,GAGE,QAAQ,EAAkB,EAAuB,aACpD,OAAO,KAAO,KAAK,OAAO,MAAS,MAC5B,KAAK,OAAO,KAAM,GAC1B,QACG,WAAW,QAEb,MAAM,IAAI,KAAK,QACb,KAAK,QC9HhB,KAAMT,IAAU,GAAK,WA+BrB,gBACU,GAEV,CAES,YACG,EACA,EACA,EAKR,OACM,CACJ,KAAM,2EAXwC,GAelD,kBAAyB,MAClB,WAAW,CAAC,MAAO,cAGpB,OAAM,EAAyD,sBAC3D,KAAK,qBACP,GACJ,MAAO,YAAK,UAAL,cAAc,YAAd,cAAyB,QAAU,SAAY,WAAK,UAAL,cAAc,YAAd,cAAyB,MAAmB,OAChG,GAAa,EACb,EAAS,MACT,EAEA,OACG,IAAe,MAChB,MACI,GAAY,OAAC,QAAO,UAAW,QAAK,UAAL,cAAc,WAAc,KAAK,kBAAqB,GACrF,EAAgB,KAAK,MAAM,MAAM,QACnC,GAAQ,UACH,GAAI,EAAG,EAAI,EAAc,OAAQ,IAAK,MACvC,GAAQ,EAAc,GACxB,EAAM,WAAW,KACd,EAAU,EAAM,OAAO,YAInB,OAGP,GAAS,KAAM,MAAK,SAAS,MAAkC,EAAO,CAC1E,YACA,QAAS,CACP,cAAe,0BAIf,CAAC,EAAO,gBACL,WAAW,CAAC,MAAO,oCAClB,GAAI,OAAM,wCAGZ,GAAa,SAAK,UAAL,cAAc,MAAO,EAAO,KAAK,KAAK,QAAQ,MAAQ,EAAO,QAC3E,MACI,GAGL,QAAK,UAAL,cAAc,KAAM,IAElB,GAAY,KACZ,MAAO,MAAK,QAAQ,MAAS,WAAa,KAAK,QAAQ,KAAK,SAElD,EAAU,KAAK,QAAQ,KAAK,SAG7B,EAAU,OACnB,EAAa,EAAG,MACZ,GACJ,MAAO,MAAK,QAAQ,MAAS,WAAa,KAAK,QAAQ,KAAK,YAAc,OACtE,KAAK,QAAQ,KAAK,UAAU,GAC5B,EAAU,EAAa,GAAG,MAC5B,IAAW,EAAW,IAChB,IAAI,4BAGL,EAGN,IAGE,KAAK,GAAG,KAFN,SAKI,QAER,KACM,KACL,MAAM,QAGb,WAAW,CAAC,OAAM,KAAM,2BAqDvB,GAEV,CAES,YACL,EACA,EACA,EACA,EAKA,OACM,EAAU,EAAO,sBAQD,OAPjB,KAAO,EAGd,kBAAyB,MAClB,WAAW,CAAC,MAAO,SAK1B,UAAU,EAAqC,EAA0D,MAClG,gBACD,KAAK,gBAAkB,OACjB,KAAK,uBACR,YAAc,KAAK,KAAK,UAAU,AAAC,GACtC,KAAK,MAAM,CAAC,YAAa,EAAU,yBAGjC,GAAc,KAAK,MAAM,UAAU,EAAK,SACvC,IAAM,MACN,gBACD,KAAK,gBAAkB,OACjB,KAAK,iBACT,KAAK,mBACF,mBACA,YAAc"}